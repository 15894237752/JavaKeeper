{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{710:function(s,t,a){\"use strict\";a.r(t);var e=a(6),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"redis-分布式锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-分布式锁\"}},[s._v(\"#\")]),s._v(\" Redis 分布式锁\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"一、什么是分布式锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、什么是分布式锁\"}},[s._v(\"#\")]),s._v(\" 一、什么是分布式锁？\")]),s._v(\" \"),a(\"p\",[s._v(\"要介绍分布式锁，首先要提到与分布式锁相对应的是线程锁、进程锁。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"线程锁\")]),s._v(\"：主要用来给方法、代码块加锁。当某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如synchronized是共享对象头，显示锁Lock是共享某个变量（state）。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"进程锁\")]),s._v(\"：为了控制同一操作系统中多个进程访问某个共享资源，因为进程具有独立性，各个进程无法访问其他进程的资源， 可以使用本地系统的信号量控制 。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"分布式锁\")]),s._v(\"：分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。\")]),s._v(\" \"),a(\"p\",[s._v(\"分布式锁一般有三种实现方式：\"),a(\"strong\",[s._v(\"1. 数据库乐观锁；2. 基于Redis的分布式锁；3. 基于ZooKeeper的分布式锁。\")])]),s._v(\" \"),a(\"p\",[s._v(\"TODO:乐观锁、悲观锁\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"可靠性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可靠性\"}},[s._v(\"#\")]),s._v(\" 可靠性\")]),s._v(\" \"),a(\"p\",[s._v(\"首先，为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：\")]),s._v(\" \"),a(\"ol\",[a(\"li\",[s._v(\"互斥性。在任意时刻，只有一个客户端能持有锁。\")]),s._v(\" \"),a(\"li\",[s._v(\"不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。\")]),s._v(\" \"),a(\"li\",[s._v(\"具有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。\")]),s._v(\" \"),a(\"li\",[s._v(\"解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"基于-redis-做分布式锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基于-redis-做分布式锁\"}},[s._v(\"#\")]),s._v(\" 基于 Redis 做分布式锁\")]),s._v(\" \"),a(\"p\",[s._v(\"setnx(key, value)：“set if not exits”，若该key-value不存在，则成功加入缓存并且返回1，存在返回0。\")]),s._v(\" \"),a(\"p\",[s._v(\"get(key)：获得key对应的value值，若不存在则返回nil。\")]),s._v(\" \"),a(\"p\",[s._v(\"getset(key, value)：先获取key对应的value值，若不存在则返回nil，然后将旧的value更新为新的value。\")]),s._v(\" \"),a(\"p\",[s._v(\"expire(key, seconds)：设置key-value的有效期为seconds秒。\")]),s._v(\" \"),a(\"p\",[s._v(\"Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。\")]),s._v(\" \"),a(\"p\",[s._v(\"> set lock:codehole true ex 5 nx OK ... \"),a(\"strong\",[s._v(\"do\")]),s._v(\" something critical ... > del lock:codehole\")]),s._v(\" \"),a(\"p\",[s._v(\"上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"set key value[expiration EX seconds|PX milliseconds] [NX|XX]\\n\")])])]),a(\"h3\",{attrs:{id:\"基于-redisson-做分布式锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基于-redisson-做分布式锁\"}},[s._v(\"#\")]),s._v(\" 基于 redisson 做分布式锁\")]),s._v(\" \"),a(\"p\",[s._v(\"redisson 是 redis 官方的分布式锁组件。GitHub 地址：\"),a(\"a\",{attrs:{href:\"https://zhuanlan.zhihu.com/write\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"https://github.com/redisson/redisson\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"p\",[s._v(\"上面的这个问题 ——> 失效时间设置多长时间为好？这个问题在 redisson 的做法是：每获得一个锁时，只设置一个很短的超时时间，同时起一个线程在每次快要到超时时间时去刷新锁的超时时间。在释放锁的同时结束这个线程。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedissonClient\")]),s._v(\" redissonClient \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Redisson\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"create\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RLock\")]),s._v(\" rLock \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" redissonClient\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getLock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"resourceName\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//直接加锁\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//rLock.lock();\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//尝试加锁5秒，锁过期时间10秒\")]),s._v(\"\\nrLock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tryLock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TimeUnit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"SECONDS\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//非阻塞异步加锁\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RFuture\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Boolean\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" rFuture \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" rLock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tryLockAsync\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TimeUnit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"SECONDS\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"rLock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"unlock\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"redlock\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redlock\"}},[s._v(\"#\")]),s._v(\" RedLock\")]),s._v(\" \"),a(\"p\",[s._v(\"我们想象一个这样的场景当机器A申请到一把锁之后，如果Redis主宕机了，这个时候从机并没有同步到这一把锁，那么机器B再次申请的时候就会再次申请到这把锁，为了解决这个问题Redis作者提出了RedLock红锁的算法,在Redission中也对RedLock进行了实现。\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{603:function(s,t,e){\"use strict\";e.r(t);var a=e(4),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[e(\"p\",[s._v(\"转自 我没有三颗心脏\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"Redis 单节点存在单点故障问题，为了解决单点问题，一般都需要对 Redis 配置从节点，然后使用哨兵来监听主节点的存活状态，如果主节点挂掉，从节点能继续提供缓存功能\")])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"一、redis-集群概述\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、redis-集群概述\"}},[s._v(\"#\")]),s._v(\" 一、Redis 集群概述\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"redis-主从复制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-主从复制\"}},[s._v(\"#\")]),s._v(\" Redis 主从复制\")]),s._v(\" \"),e(\"p\",[s._v(\"到目前为止，我们所学习的 Redis 都是 \"),e(\"strong\",[s._v(\"单机版\")]),s._v(\" 的，这也就意味着一旦我们所依赖的 Redis 服务宕机了，我们的主流程也会受到一定的影响，这当然是我们不能够接受的。\")]),s._v(\" \"),e(\"p\",[s._v(\"所以一开始我们的想法是：搞一台备用机。这样我们就可以在一台服务器出现问题的时候切换动态地到另一台去：\")]),s._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-c48d255bc0b13672.gif\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-c48d255bc0b13672.gif\",alt:\"img\"}}),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"p\",[s._v(\"幸运的是，两个节点数据的同步我们可以使用 Redis 的 \"),e(\"strong\",[s._v(\"主从同步\")]),s._v(\" 功能帮助到我们，这样一来，有个备份，心里就踏实多了。\")]),s._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-4a32b9efa3885655.jpg\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-4a32b9efa3885655.jpg\",alt:\"img\"}}),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"h3\",{attrs:{id:\"redis-哨兵\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-哨兵\"}},[s._v(\"#\")]),s._v(\" Redis 哨兵\")]),s._v(\" \"),e(\"p\",[s._v(\"后来因为某种神秘力量，Redis 老会在莫名其妙的时间点出问题 \"),e(\"em\",[s._v(\"(比如半夜 2 点)\")]),s._v(\"，我总不能 24 小时时刻守在电脑旁边切换节点吧，于是另一个想法又开始了：给所有的节点找一个 \"),e(\"strong\",[s._v(\"“管家”\")]),s._v(\"，自动帮我监听照顾节点的状态并切换：\")]),s._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-de8d9ce9e77bf211.gif\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-de8d9ce9e77bf211.gif\",alt:\"img\"}}),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"p\",[s._v(\"这大概就是 \"),e(\"strong\",[s._v(\"Redis 哨兵\")]),s._v(\" \"),e(\"em\",[s._v(\"(Sentinel)\")]),s._v(\" 的简单理解啦。什么？管家宕机了怎么办？相较于有大量请求的 Redis 服务来说，管家宕机的概率就要小得多啦.. 如果真的宕机了，我们也可以直接切换成当前可用的节点保证可用..\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"redis-集群化\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-集群化\"}},[s._v(\"#\")]),s._v(\" Redis 集群化\")]),s._v(\" \"),e(\"p\",[s._v(\"好了，通过上面的一些解决方案我们对 Redis 的 \"),e(\"strong\",[s._v(\"稳定性\")]),s._v(\" 稍微有了一些底气了，但单台节点的计算能力始终有限，所谓人多力量大，如果我们把 \"),e(\"strong\",[s._v(\"多个节点组合\")]),s._v(\" 成 \"),e(\"strong\",[s._v(\"一个可用的工作节点\")]),s._v(\"，那就大大增加了 Redis 的 \"),e(\"strong\",[s._v(\"高可用、可扩展、分布式、容错\")]),s._v(\" 等特性：\")]),s._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-8957aa6d1484c5de.png\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-8957aa6d1484c5de.png\",alt:\"img\"}}),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"h2\",{attrs:{id:\"二、主从复制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、主从复制\"}},[s._v(\"#\")]),s._v(\" 二、主从复制\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-4956a718c124a81f.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[e(\"strong\",[s._v(\"主从复制\")]),s._v(\"，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 \"),e(\"strong\",[s._v(\"主节点(master)\")]),s._v(\"，后者称为 \"),e(\"strong\",[s._v(\"从节点(slave)\")]),s._v(\"。且数据的复制是 \"),e(\"strong\",[s._v(\"单向\")]),s._v(\" 的，只能由主节点到从节点。Redis 主从复制支持 \"),e(\"strong\",[s._v(\"主从同步\")]),s._v(\" 和 \"),e(\"strong\",[s._v(\"从从同步\")]),s._v(\" 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"主从复制主要的作用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主从复制主要的作用\"}},[s._v(\"#\")]),s._v(\" 主从复制主要的作用\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"数据冗余：\")]),s._v(\" 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"故障恢复：\")]),s._v(\" 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 \"),e(\"em\",[s._v(\"(实际上是一种服务的冗余)\")]),s._v(\"。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"负载均衡：\")]),s._v(\" 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 \"),e(\"em\",[s._v(\"（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）\")]),s._v(\"，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"高可用基石：\")]),s._v(\" 除了上述作用以外，主从复制还是哨兵和集群能够实施的 \"),e(\"strong\",[s._v(\"基础\")]),s._v(\"，因此说主从复制是 Redis 高可用的基础。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"快速体验\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速体验\"}},[s._v(\"#\")]),s._v(\" 快速体验\")]),s._v(\" \"),e(\"p\",[s._v(\"在 \"),e(\"strong\",[s._v(\"Redis\")]),s._v(\" 中，用户可以通过执行 \"),e(\"code\",[s._v(\"SLAVEOF\")]),s._v(\" 命令或者设置 \"),e(\"code\",[s._v(\"slaveof\")]),s._v(\" 选项，让一个服务器去复制另一个服务器，以下三种方式是 \"),e(\"strong\",[s._v(\"完全等效\")]),s._v(\" 的：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"配置文件\")]),s._v(\"：在从服务器的配置文件中加入：\"),e(\"code\",[s._v(\"slaveof\")])]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"启动命令\")]),s._v(\"：redis-server 启动命令后加入 \"),e(\"code\",[s._v(\"--slaveof\")])]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"客户端命令\")]),s._v(\"：Redis 服务器启动后，直接通过客户端执行命令：\"),e(\"code\",[s._v(\"slaveof\")]),s._v(\"，让该 Redis 实例成为从节点。\")])]),s._v(\" \"),e(\"p\",[s._v(\"需要注意的是：\"),e(\"strong\",[s._v(\"主从复制的开启，完全是在从节点发起的，不需要我们在主节点做任何事情。\")])]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第一步-本地启动两个节点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第一步-本地启动两个节点\"}},[s._v(\"#\")]),s._v(\" 第一步：本地启动两个节点\")]),s._v(\" \"),e(\"p\",[s._v(\"在正确安装好 Redis 之后，我们可以使用 \"),e(\"code\",[s._v(\"redis-server --port\")]),s._v(\" 的方式指定创建两个不同端口的 Redis 实例，例如，下方我分别创建了一个 \"),e(\"code\",[s._v(\"6379\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"6380\")]),s._v(\" 的两个 Redis 实例：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"COPY\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 创建一个端口为 6379 的 Redis 实例\")]),s._v(\"\\nredis-server --port \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 创建一个端口为 6380 的 Redis 实例\")]),s._v(\"\\nredis-server --port \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6380\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"此时两个 Redis 节点启动后，都默认为 \"),e(\"strong\",[s._v(\"主节点\")]),s._v(\"。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第二步-建立复制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二步-建立复制\"}},[s._v(\"#\")]),s._v(\" 第二步：建立复制\")]),s._v(\" \"),e(\"p\",[s._v(\"我们在 \"),e(\"code\",[s._v(\"6380\")]),s._v(\" 端口的节点中执行 \"),e(\"code\",[s._v(\"slaveof\")]),s._v(\" 命令，使之变为从节点：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"COPY\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 在 6380 端口的 Redis 实例中使用控制台\")]),s._v(\"\\nredis-cli -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6380\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 成为本地 6379 端口实例的从节点\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:638\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"0\")]),s._v(\">\")]),s._v(\" SLAVEOF \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1ø \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\nOK\\n\")])])]),e(\"h4\",{attrs:{id:\"第三步-观察效果\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三步-观察效果\"}},[s._v(\"#\")]),s._v(\" 第三步：观察效果\")]),s._v(\" \"),e(\"p\",[s._v(\"下面我们来验证一下，主节点的数据是否会复制到从节点之中：\")]),s._v(\" \"),e(\"p\",[s._v(\"先在 \"),e(\"strong\",[s._v(\"从节点\")]),s._v(\" 中查询一个 \"),e(\"strong\",[s._v(\"不存在\")]),s._v(\" 的 key：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"127.0.0.1:6380> GET mykey\\n(nil)\\n\")])])]),e(\"p\",[s._v(\"再在 \"),e(\"strong\",[s._v(\"主节点\")]),s._v(\" 中添加这个 key\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"127.0.0.1:6379> SET mykey myvalue\\nOK\\n\")])])]),e(\"p\",[s._v(\"此时再从 \"),e(\"strong\",[s._v(\"从节点\")]),s._v(\" 中查询，会发现已经从 \"),e(\"strong\",[s._v(\"主节点\")]),s._v(\" 同步到 \"),e(\"strong\",[s._v(\"从节点\")]),s._v(\"：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"127.0.0.1:6380> GET mykey\\n“myvalue”\\n\")])])]),e(\"h4\",{attrs:{id:\"第四步-断开复制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第四步-断开复制\"}},[s._v(\"#\")]),s._v(\" 第四步：断开复制\")]),s._v(\" \"),e(\"p\",[s._v(\"通过 \"),e(\"code\",[s._v(\"slaveof <masterip> <masterport>\")]),s._v(\" 命令建立主从复制关系以后，可以通过 \"),e(\"code\",[s._v(\"slaveof no one\")]),s._v(\" 断开。需要注意的是，从节点断开复制后，\"),e(\"strong\",[s._v(\"不会删除已有的数据\")]),s._v(\"，只是不再接受主节点新的数据变化。\")]),s._v(\" \"),e(\"p\",[s._v(\"从节点执行 \"),e(\"code\",[s._v(\"slaveof no one\")]),s._v(\" 之后，从节点和主节点分别打印日志如下：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"# 从节点打印日志\\n61496:M 17 Mar 2020 08:10:22.749 # Connection with master lost.\\n61496:M 17 Mar 2020 08:10:22.749 * Caching the disconnected master state.\\n61496:M 17 Mar 2020 08:10:22.749 * Discarding previously cached master state.\\n61496:M 17 Mar 2020 08:10:22.749 * MASTER MODE enabled (user request from 'id=4 addr=127.0.0.1:55096 fd=8 name= age=1664 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=34 qbuf-free=32734 obl=0 oll=0 omem=0 events=r cmd=slaveof')\\n\\n# 主节点打印日志\\n61467:M 17 Mar 2020 08:10:22.749 # Connection with replica 127.0.0.1:6380 lost.\\n\")])])]),e(\"h3\",{attrs:{id:\"实现原理简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现原理简析\"}},[s._v(\"#\")]),s._v(\" 实现原理简析\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-c97a6bcc0936cd17.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"为了节省篇幅，我把主要的步骤都 \"),e(\"strong\",[s._v(\"浓缩\")]),s._v(\" 在了上图中，其实也可以 \"),e(\"strong\",[s._v(\"简化成三个阶段：准备阶段-数据同步阶段-命令传播阶段\")]),s._v(\"。下面我们来进行一些必要的说明。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"身份验证-主从复制安全问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#身份验证-主从复制安全问题\"}},[s._v(\"#\")]),s._v(\" 身份验证 | 主从复制安全问题\")]),s._v(\" \"),e(\"p\",[s._v(\"在上面的 \"),e(\"strong\",[s._v(\"快速体验\")]),s._v(\" 过程中，你会发现 \"),e(\"code\",[s._v(\"slaveof\")]),s._v(\" 这个命令居然不需要验证？这意味着只要知道了 ip 和端口就可以随意拷贝服务器上的数据了？\")]),s._v(\" \"),e(\"p\",[s._v(\"那当然不能够了，我们可以通过在 \"),e(\"strong\",[s._v(\"主节点\")]),s._v(\" 配置 \"),e(\"code\",[s._v(\"requirepass\")]),s._v(\" 来设置密码，这样就必须在 \"),e(\"strong\",[s._v(\"从节点\")]),s._v(\" 中对应配置好 \"),e(\"code\",[s._v(\"masterauth\")]),s._v(\" 参数 \"),e(\"em\",[s._v(\"(与主节点 \"),e(\"code\",[s._v(\"requirepass\")]),s._v(\" 保持一致)\")]),s._v(\" 才能够进行正常复制了。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"sync-命令是一个非常耗费资源的操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sync-命令是一个非常耗费资源的操作\"}},[s._v(\"#\")]),s._v(\" SYNC 命令是一个非常耗费资源的操作\")]),s._v(\" \"),e(\"p\",[s._v(\"每次执行 \"),e(\"code\",[s._v(\"SYNC\")]),s._v(\" 命令，主从服务器需要执行如下动作：\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[s._v(\"主服务器\")]),s._v(\" 需要执行 \"),e(\"code\",[s._v(\"BGSAVE\")]),s._v(\" 命令来生成 RDB 文件，这个生成操作会 \"),e(\"strong\",[s._v(\"消耗\")]),s._v(\" 主服务器大量的 \"),e(\"strong\",[s._v(\"CPU、内存和磁盘 I/O 的资源\")]),s._v(\"；\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"主服务器\")]),s._v(\" 需要将自己生成的 RDB 文件 发送给从服务器，这个发送操作会 \"),e(\"strong\",[s._v(\"消耗\")]),s._v(\" 主服务器 \"),e(\"strong\",[s._v(\"大量的网络资源\")]),s._v(\" \"),e(\"em\",[s._v(\"(带宽和流量)\")]),s._v(\"，并对主服务器响应命令请求的时间产生影响；\")]),s._v(\" \"),e(\"li\",[s._v(\"接收到 RDB 文件的 \"),e(\"strong\",[s._v(\"从服务器\")]),s._v(\" 需要载入主服务器发来的 RBD 文件，并且在载入期间，从服务器 \"),e(\"strong\",[s._v(\"会因为阻塞而没办法处理命令请求\")]),s._v(\"；\")])]),s._v(\" \"),e(\"p\",[s._v(\"特别是当出现 \"),e(\"strong\",[s._v(\"断线重复制\")]),s._v(\" 的情况是时，为了让从服务器补足断线时确实的那一小部分数据，却要执行一次如此耗资源的 \"),e(\"code\",[s._v(\"SYNC\")]),s._v(\" 命令，显然是不合理的。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"psync-命令的引入\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#psync-命令的引入\"}},[s._v(\"#\")]),s._v(\" PSYNC 命令的引入\")]),s._v(\" \"),e(\"p\",[s._v(\"所以在 \"),e(\"strong\",[s._v(\"Redis 2.8\")]),s._v(\" 中引入了 \"),e(\"code\",[s._v(\"PSYNC\")]),s._v(\" 命令来代替 \"),e(\"code\",[s._v(\"SYNC\")]),s._v(\"，它具有两种模式：\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[s._v(\"全量复制：\")]),s._v(\" 用于初次复制或其他无法进行部分复制的情况，将主节点中的所有数据都发送给从节点，是一个非常重型的操作；\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"部分复制：\")]),s._v(\" 用于网络中断等情况后的复制，只将 \"),e(\"strong\",[s._v(\"中断期间主节点执行的写命令\")]),s._v(\" 发送给从节点，与全量复制相比更加高效。\"),e(\"strong\",[s._v(\"需要注意\")]),s._v(\" 的是，如果网络中断时间过长，导致主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制；\")])]),s._v(\" \"),e(\"p\",[s._v(\"部分复制的原理主要是靠主从节点分别维护一个 \"),e(\"strong\",[s._v(\"复制偏移量\")]),s._v(\"，有了这个偏移量之后断线重连之后一比较，之后就可以仅仅把从服务器断线之后确实的这部分数据给补回来了。\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"更多的详细内容可以参考下方 \"),e(\"em\",[s._v(\"参考资料 3\")])])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"三、redis-sentinel-哨兵\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、redis-sentinel-哨兵\"}},[s._v(\"#\")]),s._v(\" 三、Redis Sentinel 哨兵\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-884d5be9a2ddfebc.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[e(\"em\",[s._v(\"上图\")]),s._v(\" 展示了一个典型的哨兵架构图，它由两部分组成，哨兵节点和数据节点：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"哨兵节点：\")]),s._v(\" 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据；\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"数据节点：\")]),s._v(\" 主节点和从节点都是数据节点；\")])]),s._v(\" \"),e(\"p\",[s._v(\"在复制的基础上，哨兵实现了 \"),e(\"strong\",[s._v(\"自动化的故障恢复\")]),s._v(\" 功能，下方是官方对于哨兵功能的描述：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"监控（Monitoring）：\")]),s._v(\" 哨兵会不断地检查主节点和从节点是否运作正常。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"自动故障转移（Automatic failover）：\")]),s._v(\" 当 \"),e(\"strong\",[s._v(\"主节点\")]),s._v(\" 不能正常工作时，哨兵会开始 \"),e(\"strong\",[s._v(\"自动故障转移操作\")]),s._v(\"，它会将失效主节点的其中一个 \"),e(\"strong\",[s._v(\"从节点升级为新的主节点\")]),s._v(\"，并让其他从节点改为复制新的主节点。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"配置提供者（Configuration provider）：\")]),s._v(\" 客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"通知（Notification）：\")]),s._v(\" 哨兵可以将故障转移的结果发送给客户端。\")])]),s._v(\" \"),e(\"p\",[s._v(\"其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移。而配置提供者和通知功能，则需要在与客户端的交互中才能体现。\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"快速体验-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速体验-2\"}},[s._v(\"#\")]),s._v(\" 快速体验\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第一步-创建主从节点配置文件并启动\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第一步-创建主从节点配置文件并启动\"}},[s._v(\"#\")]),s._v(\" 第一步：创建主从节点配置文件并启动\")]),s._v(\" \"),e(\"p\",[s._v(\"正确安装好 Redis 之后，我们去到 Redis 的安装目录 \"),e(\"em\",[s._v(\"(mac 默认在 \"),e(\"code\",[s._v(\"/usr/local/\")]),s._v(\")*，找到 \"),e(\"code\",[s._v(\"redis.conf\")]),s._v(\" 文件复制三份分别命名为 \"),e(\"code\",[s._v(\"redis-master.conf\")]),s._v(\"/\"),e(\"code\",[s._v(\"redis-slave1.conf\")]),s._v(\"/\"),e(\"code\",[s._v(\"redis-slave2.conf\")]),s._v(\"，分别作为 \"),e(\"code\",[s._v(\"1\")]),s._v(\" 个主节点和 \"),e(\"code\",[s._v(\"2\")]),s._v(\" 个从节点的配置文件 *(下图演示了我本机的 \"),e(\"code\",[s._v(\"redis.conf\")]),s._v(\" 文件的位置)\")])]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-34de77bfca56d32e.png\",alt:\"img\"}})]),s._v(\" \"),e(\"p\",[s._v(\"打开可以看到这个 \"),e(\"code\",[s._v(\".conf\")]),s._v(\" 后缀的文件里面有很多说明的内容，全部删除然后分别改成下面的样子：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"COPY\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#redis-master.conf\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\nlogfile \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"6379.log\"')]),s._v(\"\\ndbfilename \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"dump-6379.rdb\"')]),s._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#redis-slave1.conf\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6380\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\nlogfile \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"6380.log\"')]),s._v(\"\\ndbfilename \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"dump-6380.rdb\"')]),s._v(\"\\nslaveof \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#redis-slave2.conf\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6381\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\nlogfile \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"6381.log\"')]),s._v(\"\\ndbfilename \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"dump-6381.rdb\"')]),s._v(\"\\nslaveof \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"然后我们可以执行 \"),e(\"code\",[s._v(\"redis-server\")]),s._v(\" 来根据配置文件启动不同的 Redis 实例，依次启动主从节点：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"COPYredis-server /usr/local/redis-5.0.3/redis-master.conf\\nredis-server /usr/local/redis-5.0.3/redis-slave1.conf\\nredis-server /usr/local/redis-5.0.3/redis-slave2.conf\\n\")])])]),e(\"p\",[s._v(\"节点启动后，我们执行 \"),e(\"code\",[s._v(\"redis-cli\")]),s._v(\" 默认连接到我们端口为 \"),e(\"code\",[s._v(\"6379\")]),s._v(\" 的主节点执行 \"),e(\"code\",[s._v(\"info Replication\")]),s._v(\" 检查一下主从状态是否正常：\"),e(\"em\",[s._v(\"(可以看到下方正确地显示了两个从节点)\")])]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-a1c935f094240cac.png\",alt:\"img\"}})]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第二步-创建哨兵节点配置文件并启动\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二步-创建哨兵节点配置文件并启动\"}},[s._v(\"#\")]),s._v(\" 第二步：创建哨兵节点配置文件并启动\")]),s._v(\" \"),e(\"p\",[s._v(\"按照上面同样的方法，我们给哨兵节点也创建三个配置文件。\"),e(\"em\",[s._v(\"(哨兵节点本质上是特殊的 Redis 节点，所以配置几乎没什么差别，只是在端口上做区分就好)\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# redis-sentinel-1.conf\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26379\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\nlogfile \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"26379.log\"')]),s._v(\"\\nsentinel monitor mymaster \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# redis-sentinel-2.conf\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26380\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\nlogfile \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"26380.log\"')]),s._v(\"\\nsentinel monitor mymaster \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# redis-sentinel-3.conf\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26381\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\nlogfile \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"26381.log\"')]),s._v(\"\\nsentinel monitor mymaster \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"其中，\"),e(\"code\",[s._v(\"sentinel monitor mymaster 127.0.0.1 6379 2\")]),s._v(\" 配置的含义是：该哨兵节点监控 \"),e(\"code\",[s._v(\"127.0.0.1:6379\")]),s._v(\" 这个主节点，该主节点的名称是 \"),e(\"code\",[s._v(\"mymaster\")]),s._v(\"，最后的 \"),e(\"code\",[s._v(\"2\")]),s._v(\" 的含义与主节点的故障判定有关：至少需要 \"),e(\"code\",[s._v(\"2\")]),s._v(\" 个哨兵节点同意，才能判定主节点故障并进行故障转移。\")]),s._v(\" \"),e(\"p\",[s._v(\"执行下方命令将哨兵节点启动起来：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"redis-server /usr/local/redis-5.0.3/redis-sentinel-1.conf --sentinel\\nredis-server /usr/local/redis-5.0.3/redis-sentinel-2.conf --sentinel\\nredis-server /usr/local/redis-5.0.3/redis-sentinel-3.conf --sentinel\\n\")])])]),e(\"p\",[s._v(\"使用 \"),e(\"code\",[s._v(\"redis-cil\")]),s._v(\" 工具连接哨兵节点，并执行 \"),e(\"code\",[s._v(\"info Sentinel\")]),s._v(\" 命令来查看是否已经在监视主节点了：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 连接端口为 26379 的 Redis 节点\")]),s._v(\"\\n➜  ~ redis-cli -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26379\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:2637\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"9\")]),s._v(\">\")]),s._v(\" info Sentinel\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# Sentinel\")]),s._v(\"\\nsentinel_masters:1\\nsentinel_tilt:0\\nsentinel_running_scripts:0\\nsentinel_scripts_queue_length:0\\nsentinel_simulate_failure_flags:0\\nmaster0:name\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"mymaster,status\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"ok,address\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:6379,slaves\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\",sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"此时你打开刚才写好的哨兵配置文件，你还会发现出现了一些变化：\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第三步-演示故障转移\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三步-演示故障转移\"}},[s._v(\"#\")]),s._v(\" 第三步：演示故障转移\")]),s._v(\" \"),e(\"p\",[s._v(\"首先，我们使用 \"),e(\"code\",[s._v(\"kill -9\")]),s._v(\" 命令来杀掉主节点，\"),e(\"strong\",[s._v(\"同时\")]),s._v(\" 在哨兵节点中执行 \"),e(\"code\",[s._v(\"info Sentinel\")]),s._v(\" 命令来观察故障节点的过程：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"➜  ~ \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"ps\")]),s._v(\" aux \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"grep\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\nlongtao          \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"74529\")]),s._v(\"   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.3\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.0\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4346936\")]),s._v(\"   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2132\")]),s._v(\"   ??  Ss   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\":30上午   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\":03.09 redis-server *:26379 \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"sentinel\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\"\\nlongtao          \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"73541\")]),s._v(\"   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.2\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.0\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4348072\")]),s._v(\"   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2292\")]),s._v(\"   ??  Ss   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\":18上午   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\":04.79 redis-server *:6379\\nlongtao          \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"75521\")]),s._v(\"   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.0\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.0\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4286728\")]),s._v(\"    \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"728\")]),s._v(\" s008  S+   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\":39上午   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\":00.00 \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"grep\")]),s._v(\" --color\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"auto --exclude-dir\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\".bzr --exclude-dir\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"CVS --exclude-dir\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\".git --exclude-dir\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\".hg --exclude-dir\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\".svn \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\nlongtao          \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"74836\")]),s._v(\"   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.0\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.0\")]),s._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4289844\")]),s._v(\"    \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"944\")]),s._v(\" s006  S+   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\":32上午   \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\":00.01 redis-cli -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26379\")]),s._v(\"\\n➜  ~ \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"kill\")]),s._v(\" -9 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"73541\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"如果 \"),e(\"strong\",[s._v(\"刚杀掉瞬间\")]),s._v(\" 在哨兵节点中执行 \"),e(\"code\",[s._v(\"info\")]),s._v(\" 命令来查看，会发现主节点还没有切换过来，因为哨兵发现主节点故障并转移需要一段时间：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 第一时间查看哨兵节点发现并未转移，还在 6379 端口\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:2637\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"9\")]),s._v(\">\")]),s._v(\" info Sentinel\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# Sentinel\")]),s._v(\"\\nsentinel_masters:1\\nsentinel_tilt:0\\nsentinel_running_scripts:0\\nsentinel_scripts_queue_length:0\\nsentinel_simulate_failure_flags:0\\nmaster0:name\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"mymaster,status\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"ok,address\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:6379,slaves\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\",sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"一段时间之后你再执行 \"),e(\"code\",[s._v(\"info\")]),s._v(\" 命令，查看，你就会发现主节点已经切换成了 \"),e(\"code\",[s._v(\"6381\")]),s._v(\" 端口的从节点：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 过一段时间之后在执行，发现已经切换了 6381 端口\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:2637\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"9\")]),s._v(\">\")]),s._v(\" info Sentinel\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# Sentinel\")]),s._v(\"\\nsentinel_masters:1\\nsentinel_tilt:0\\nsentinel_running_scripts:0\\nsentinel_scripts_queue_length:0\\nsentinel_simulate_failure_flags:0\\nmaster0:name\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"mymaster,status\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"ok,address\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:6381,slaves\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\",sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"但同时还可以发现，\"),e(\"strong\",[s._v(\"哨兵节点认为新的主节点仍然有两个从节点\")]),s._v(\" \"),e(\"em\",[s._v(\"(上方 slaves=2)\")]),s._v(\"，这是因为哨兵在将 \"),e(\"code\",[s._v(\"6381\")]),s._v(\" 切换成主节点的同时，将 \"),e(\"code\",[s._v(\"6379\")]),s._v(\" 节点置为其从节点。虽然 \"),e(\"code\",[s._v(\"6379\")]),s._v(\" 从节点已经挂掉，但是由于 \"),e(\"strong\",[s._v(\"哨兵并不会对从节点进行客观下线\")]),s._v(\"，因此认为该从节点一直存在。当 \"),e(\"code\",[s._v(\"6379\")]),s._v(\" 节点重新启动后，会自动变成 \"),e(\"code\",[s._v(\"6381\")]),s._v(\" 节点的从节点。\")]),s._v(\" \"),e(\"p\",[s._v(\"另外，在故障转移的阶段，哨兵和主从节点的配置文件都会被改写：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"对于主从节点：\")]),s._v(\" 主要是 \"),e(\"code\",[s._v(\"slaveof\")]),s._v(\" 配置的变化，新的主节点没有了 \"),e(\"code\",[s._v(\"slaveof\")]),s._v(\" 配置，其从节点则 \"),e(\"code\",[s._v(\"slaveof\")]),s._v(\" 新的主节点。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"对于哨兵节点：\")]),s._v(\" 除了主从节点信息的变化，纪元(epoch) \"),e(\"em\",[s._v(\"(记录当前集群状态的参数)\")]),s._v(\" 也会变化，纪元相关的参数都 +1 了。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"客户端访问哨兵系统代码演示\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#客户端访问哨兵系统代码演示\"}},[s._v(\"#\")]),s._v(\" 客户端访问哨兵系统代码演示\")]),s._v(\" \"),e(\"p\",[s._v(\"上面我们在 \"),e(\"em\",[s._v(\"快速体验\")]),s._v(\" 中主要感受到了服务端自己对于当前主从节点的自动化治理，下面我们以 Java 代码为例，来演示一下客户端如何访问我们的哨兵系统：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-java extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"testSentinel\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throws\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Exception\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n         \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" masterName \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"mymaster\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Set\")]),e(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" sentinels \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"HashSet\")]),e(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"127.0.0.1:26379\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"127.0.0.1:26380\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"127.0.0.1:26381\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n         \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 初始化过程做了很多工作\")]),s._v(\"\\n         \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"JedisSentinelPool\")]),s._v(\" pool \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"JedisSentinelPool\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"masterName\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" sentinels\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n         \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Jedis\")]),s._v(\" jedis \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" pool\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getResource\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         jedis\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"set\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"key1\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"value1\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         pool\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"close\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])])]),e(\"h4\",{attrs:{id:\"客户端原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#客户端原理\"}},[s._v(\"#\")]),s._v(\" 客户端原理\")]),s._v(\" \"),e(\"p\",[s._v(\"Jedis 客户端对哨兵提供了很好的支持。如上述代码所示，我们只需要向 Jedis 提供哨兵节点集合和 \"),e(\"code\",[s._v(\"masterName\")]),s._v(\" ，构造 \"),e(\"code\",[s._v(\"JedisSentinelPool\")]),s._v(\" 对象，然后便可以像使用普通 Redis 连接池一样来使用了：通过 \"),e(\"code\",[s._v(\"pool.getResource()\")]),s._v(\" 获取连接，执行具体的命令。\")]),s._v(\" \"),e(\"p\",[s._v(\"在整个过程中，我们的代码不需要显式的指定主节点的地址，就可以连接到主节点；代码中对故障转移没有任何体现，就可以在哨兵完成故障转移后自动的切换主节点。之所以可以做到这一点，是因为在 \"),e(\"code\",[s._v(\"JedisSentinelPool\")]),s._v(\" 的构造器中，进行了相关的工作；主要包括以下两点：\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[s._v(\"遍历哨兵节点，获取主节点信息：\")]),s._v(\" 遍历哨兵节点，通过其中一个哨兵节点 + \"),e(\"code\",[s._v(\"masterName\")]),s._v(\" 获得主节点的信息；该功能是通过调用哨兵节点的 \"),e(\"code\",[s._v(\"sentinel get-master-addr-by-name\")]),s._v(\" 命令实现；\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"增加对哨兵的监听：\")]),s._v(\" 这样当发生故障转移时，客户端便可以收到哨兵的通知，从而完成主节点的切换。具体做法是：利用 Redis 提供的 \"),e(\"strong\",[s._v(\"发布订阅\")]),s._v(\" 功能，为每一个哨兵节点开启一个单独的线程，订阅哨兵节点的 + switch-master 频道，当收到消息时，重新初始化连接池。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"新的主服务器是怎样被挑选出来的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#新的主服务器是怎样被挑选出来的\"}},[s._v(\"#\")]),s._v(\" 新的主服务器是怎样被挑选出来的？\")]),s._v(\" \"),e(\"p\",[e(\"strong\",[s._v(\"故障转移操作的第一步\")]),s._v(\" 要做的就是在已下线主服务器属下的所有从服务器中，挑选出一个状态良好、数据完整的从服务器，然后向这个从服务器发送 \"),e(\"code\",[s._v(\"slaveof no one\")]),s._v(\" 命令，将这个从服务器转换为主服务器。但是这个从服务器是怎么样被挑选出来的呢？\")]),s._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-02dfea57f44fc27e.png\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-02dfea57f44fc27e.png\",alt:\"img\"}}),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"p\",[s._v(\"简单来说 Sentinel 使用以下规则来选择新的主服务器：\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[s._v(\"在失效主服务器属下的从服务器当中， 那些被标记为主观下线、已断线、或者最后一次回复 PING 命令的时间大于五秒钟的从服务器都会被 \"),e(\"strong\",[s._v(\"淘汰\")]),s._v(\"。\")]),s._v(\" \"),e(\"li\",[s._v(\"在失效主服务器属下的从服务器当中， 那些与失效主服务器连接断开的时长超过 down-after 选项指定的时长十倍的从服务器都会被 \"),e(\"strong\",[s._v(\"淘汰\")]),s._v(\"。\")]),s._v(\" \"),e(\"li\",[s._v(\"在 \"),e(\"strong\",[s._v(\"经历了以上两轮淘汰之后\")]),s._v(\" 剩下来的从服务器中， 我们选出 \"),e(\"strong\",[s._v(\"复制偏移量（replication offset）最大\")]),s._v(\" 的那个 \"),e(\"strong\",[s._v(\"从服务器\")]),s._v(\" 作为新的主服务器；如果复制偏移量不可用，或者从服务器的复制偏移量相同，那么 \"),e(\"strong\",[s._v(\"带有最小运行 ID\")]),s._v(\" 的那个从服务器成为新的主服务器。\")])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"四、redis-集群\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、redis-集群\"}},[s._v(\"#\")]),s._v(\" 四、Redis 集群\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-516eb4a9465451a6.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[e(\"em\",[s._v(\"上图\")]),s._v(\" 展示了 \"),e(\"strong\",[s._v(\"Redis Cluster\")]),s._v(\" 典型的架构图，集群中的每一个 Redis 节点都 \"),e(\"strong\",[s._v(\"互相两两相连\")]),s._v(\"，客户端任意 \"),e(\"strong\",[s._v(\"直连\")]),s._v(\" 到集群中的 \"),e(\"strong\",[s._v(\"任意一台\")]),s._v(\"，就可以对其他 Redis 节点进行 \"),e(\"strong\",[s._v(\"读写\")]),s._v(\" 的操作。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"基本原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本原理\"}},[s._v(\"#\")]),s._v(\" 基本原理\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-f65c71ca6811c634.png\",alt:\"img\"}})]),s._v(\" \"),e(\"p\",[s._v(\"Redis 集群中内置了 \"),e(\"code\",[s._v(\"16384\")]),s._v(\" 个哈希槽。当客户端连接到 Redis 集群之后，会同时得到一份关于这个 \"),e(\"strong\",[s._v(\"集群的配置信息\")]),s._v(\"，当客户端具体对某一个 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 值进行操作时，会计算出它的一个 Hash 值，然后把结果对 \"),e(\"code\",[s._v(\"16384\")]),s._v(\" \"),e(\"strong\",[s._v(\"求余数\")]),s._v(\"，这样每个 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 都会对应一个编号在 \"),e(\"code\",[s._v(\"0-16383\")]),s._v(\" 之间的哈希槽，Redis 会根据节点数量 \"),e(\"strong\",[s._v(\"大致均等\")]),s._v(\" 的将哈希槽映射到不同的节点。\")]),s._v(\" \"),e(\"p\",[s._v(\"再结合集群的配置信息就能够知道这个 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 值应该存储在哪一个具体的 Redis 节点中，如果不属于自己管，那么就会使用一个特殊的 \"),e(\"code\",[s._v(\"MOVED\")]),s._v(\" 命令来进行一个跳转，告诉客户端去连接这个节点以获取数据：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"GET x\\n-MOVED \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3999\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:6381\\n\")])])]),e(\"p\",[e(\"code\",[s._v(\"MOVED\")]),s._v(\" 指令第一个参数 \"),e(\"code\",[s._v(\"3999\")]),s._v(\" 是 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 对应的槽位编号，后面是目标节点地址，\"),e(\"code\",[s._v(\"MOVED\")]),s._v(\" 命令前面有一个减号，表示这是一个错误的消息。客户端在收到 \"),e(\"code\",[s._v(\"MOVED\")]),s._v(\" 指令后，就立即纠正本地的 \"),e(\"strong\",[s._v(\"槽位映射表\")]),s._v(\"，那么下一次再访问 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 时就能够到正确的地方去获取了。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"集群的主要作用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群的主要作用\"}},[s._v(\"#\")]),s._v(\" 集群的主要作用\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[s._v(\"数据分区：\")]),s._v(\" 数据分区 \"),e(\"em\",[s._v(\"(或称数据分片)\")]),s._v(\" 是集群最核心的功能。集群将数据分散到多个节点，\"),e(\"strong\",[s._v(\"一方面\")]),s._v(\" 突破了 Redis 单机内存大小的限制，\"),e(\"strong\",[s._v(\"存储容量大大增加\")]),s._v(\"；\"),e(\"strong\",[s._v(\"另一方面\")]),s._v(\" 每个主节点都可以对外提供读服务和写服务，\"),e(\"strong\",[s._v(\"大大提高了集群的响应能力\")]),s._v(\"。Redis 单机内存大小受限问题，在介绍持久化和主从复制时都有提及，例如，如果单机内存太大，\"),e(\"code\",[s._v(\"bgsave\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"bgrewriteaof\")]),s._v(\" 的 \"),e(\"code\",[s._v(\"fork\")]),s._v(\" 操作可能导致主进程阻塞，主从环境下主机切换时可能导致从节点长时间无法提供服务，全量复制阶段主节点的复制缓冲区可能溢出……\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"高可用：\")]),s._v(\" 集群支持主从复制和主节点的 \"),e(\"strong\",[s._v(\"自动故障转移\")]),s._v(\" \"),e(\"em\",[s._v(\"（与哨兵类似）\")]),s._v(\"，当任一节点发生故障时，集群仍然可以对外提供服务。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"快速体验-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速体验-3\"}},[s._v(\"#\")]),s._v(\" 快速体验\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第一步-创建集群节点配置文件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第一步-创建集群节点配置文件\"}},[s._v(\"#\")]),s._v(\" 第一步：创建集群节点配置文件\")]),s._v(\" \"),e(\"p\",[s._v(\"首先我们找一个地方创建一个名为 \"),e(\"code\",[s._v(\"redis-cluster\")]),s._v(\" 的目录：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"mkdir\")]),s._v(\" -p ~/Desktop/redis-cluster\\n\")])])]),e(\"p\",[s._v(\"然后按照上面的方法，创建六个配置文件，分别命名为：\"),e(\"code\",[s._v(\"redis_7000.conf\")]),s._v(\"/\"),e(\"code\",[s._v(\"redis_7001.conf\")]),s._v(\"…..\"),e(\"code\",[s._v(\"redis_7005.conf\")]),s._v(\"，然后根据不同的端口号修改对应的端口值就好了：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 后台执行\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 端口号\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7000\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 为每一个集群节点指定一个 pid_file\")]),s._v(\"\\npidfile ~/Desktop/redis-cluster/redis_7000.pid\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 启动集群模式\")]),s._v(\"\\ncluster-enabled \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 每一个集群节点都有一个配置文件，这个文件是不能手动编辑的。确保每一个集群节点的配置文件不通\")]),s._v(\"\\ncluster-config-file nodes-7000.conf\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 集群节点的超时时间，单位：ms，超时后集群会认为该节点失败\")]),s._v(\"\\ncluster-node-timeout \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5000\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 最后将 appendonly 改成 yes(AOF 持久化)\")]),s._v(\"\\nappendonly \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"记得把对应上述配置文件中根端口对应的配置都修改掉 \"),e(\"em\",[s._v(\"(port/ pidfile/ cluster-config-file)\")]),s._v(\"。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第二步-分别启动-6-个-redis-实例\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二步-分别启动-6-个-redis-实例\"}},[s._v(\"#\")]),s._v(\" 第二步：分别启动 6 个 Redis 实例\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"COPYredis-server ~/Desktop/redis-cluster/redis_7000.conf\\nredis-server ~/Desktop/redis-cluster/redis_7001.conf\\nredis-server ~/Desktop/redis-cluster/redis_7002.conf\\nredis-server ~/Desktop/redis-cluster/redis_7003.conf\\nredis-server ~/Desktop/redis-cluster/redis_7004.conf\\nredis-server ~/Desktop/redis-cluster/redis_7005.conf\\n\")])])]),e(\"p\",[s._v(\"然后执行 \"),e(\"code\",[s._v(\"ps -ef | grep redis\")]),s._v(\" 查看是否启动成功：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-452c3152054c36f1.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"可以看到 \"),e(\"code\",[s._v(\"6\")]),s._v(\" 个 Redis 节点都以集群的方式成功启动了，\"),e(\"strong\",[s._v(\"但是现在每个节点还处于独立的状态\")]),s._v(\"，也就是说它们每一个都各自成了一个集群，还没有互相联系起来，我们需要手动地把他们之间建立起联系。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第三步-建立集群\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三步-建立集群\"}},[s._v(\"#\")]),s._v(\" 第三步：建立集群\")]),s._v(\" \"),e(\"p\",[s._v(\"执行下列命令：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"redis-cli --cluster create --cluster-replicas \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7000 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7001 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7002 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7003 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7004 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7005\\n\")])])]),e(\"p\",[s._v(\"这里稍微解释一下这个 \"),e(\"code\",[s._v(\"--replicas 1\")]),s._v(\" 的意思是：我们希望为集群中的每个主节点创建一个从节点。\")]),s._v(\" \"),e(\"p\",[s._v(\"观察控制台输出：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-d5ab644e76e9cc87.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"看到 \"),e(\"code\",[s._v(\"[OK]\")]),s._v(\" 的信息之后，就表示集群已经搭建成功了，可以看到，这里我们正确地创建了三主三从的集群。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第四步-验证集群\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第四步-验证集群\"}},[s._v(\"#\")]),s._v(\" 第四步：验证集群\")]),s._v(\" \"),e(\"p\",[s._v(\"我们先使用 \"),e(\"code\",[s._v(\"redic-cli\")]),s._v(\" 任意连接一个节点：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"redis-cli -c -h \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7000\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"0\")]),s._v(\">\")]),s._v(\"\\n\")])])]),e(\"p\",[e(\"code\",[s._v(\"-c\")]),s._v(\"表示集群模式；\"),e(\"code\",[s._v(\"-h\")]),s._v(\" 指定 ip 地址；\"),e(\"code\",[s._v(\"-p\")]),s._v(\" 指定端口。\")]),s._v(\" \"),e(\"p\",[s._v(\"然后随便 \"),e(\"code\",[s._v(\"set\")]),s._v(\" 一些值观察控制台输入：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"0\")]),s._v(\">\")]),s._v(\" SET name wmyskxz\\n-\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" Redirected to slot \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5798\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" located at \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7001\\nOK\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"可以看到这里 Redis 自动帮我们进行了 \"),e(\"code\",[s._v(\"Redirected\")]),s._v(\" 操作跳转到了 \"),e(\"code\",[s._v(\"7001\")]),s._v(\" 这个实例上。\")]),s._v(\" \"),e(\"p\",[s._v(\"我们再使用 \"),e(\"code\",[s._v(\"cluster info\")]),s._v(\" \"),e(\"em\",[s._v(\"(查看集群信息)\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"cluster nodes\")]),s._v(\" \"),e(\"em\",[s._v(\"(查看节点列表)\")]),s._v(\" 来分别看看：\"),e(\"em\",[s._v(\"(任意节点输入均可)\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\" CLUSTER INFO\\ncluster_state:ok\\ncluster_slots_assigned:16384\\ncluster_slots_ok:16384\\ncluster_slots_pfail:0\\ncluster_slots_fail:0\\ncluster_known_nodes:6\\ncluster_size:3\\ncluster_current_epoch:6\\ncluster_my_epoch:2\\ncluster_stats_messages_ping_sent:1365\\ncluster_stats_messages_pong_sent:1358\\ncluster_stats_messages_meet_sent:4\\ncluster_stats_messages_sent:2727\\ncluster_stats_messages_ping_received:1357\\ncluster_stats_messages_pong_received:1369\\ncluster_stats_messages_meet_received:1\\ncluster_stats_messages_received:2727\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\" CLUSTER NODES\\n56a04742f36c6e84968cae871cd438935081e86f \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7003@17003 slave 4ec8c022e9d546c9b51deb9d85f6cf867bf73db6 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\" connected\\n4ec8c022e9d546c9b51deb9d85f6cf867bf73db6 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7000@17000 master - \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" connected \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"-5460\\ne2539c4398b8258d3f9ffa714bd778da107cb2cd \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7005@17005 slave a3406db9ae7144d17eb7df5bffe8b70bb5dd06b8 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428885222\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\" connected\\nd31cd1f423ab1e1849cac01ae927e4b6950f55d9 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7004@17004 slave 236cefaa9cdc295bc60a5bd1aed6a7152d4f384d \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884209\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\" connected\\n236cefaa9cdc295bc60a5bd1aed6a7152d4f384d \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7001@17001 myself,master - \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428882000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" connected \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5461\")]),s._v(\"-10922\\na3406db9ae7144d17eb7df5bffe8b70bb5dd06b8 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7002@17002 master - \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" connected \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10923\")]),s._v(\"-16383\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"数据分区方案简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据分区方案简析\"}},[s._v(\"#\")]),s._v(\" 数据分区方案简析\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"方案一-哈希值-节点数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案一-哈希值-节点数\"}},[s._v(\"#\")]),s._v(\" 方案一：哈希值 % 节点数\")]),s._v(\" \"),e(\"p\",[s._v(\"哈希取余分区思路非常简单：计算 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 的 hash 值，然后对节点数量进行取余，从而决定数据映射到哪个节点上。\")]),s._v(\" \"),e(\"p\",[s._v(\"不过该方案最大的问题是，\"),e(\"strong\",[s._v(\"当新增或删减节点时\")]),s._v(\"，节点数量发生变化，系统中所有的数据都需要 \"),e(\"strong\",[s._v(\"重新计算映射关系\")]),s._v(\"，引发大规模数据迁移。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"方案二-一致性哈希分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案二-一致性哈希分区\"}},[s._v(\"#\")]),s._v(\" 方案二：一致性哈希分区\")]),s._v(\" \"),e(\"p\",[s._v(\"一致性哈希算法将 \"),e(\"strong\",[s._v(\"整个哈希值空间\")]),s._v(\" 组织成一个虚拟的圆环，范围是 0 - $2^(32-1)$，对于每一个数据，根据 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 计算 hash 值，确数据在环上的位置，然后从此位置沿顺时针行走，找到的第一台服务器就是其应该映射到的服务器：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-40e8a2c096c8da92.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"与哈希取余分区相比，一致性哈希分区将 \"),e(\"strong\",[s._v(\"增减节点的影响限制在相邻节点\")]),s._v(\"。以上图为例，如果在 \"),e(\"code\",[s._v(\"node1\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 之间增加 \"),e(\"code\",[s._v(\"node5\")]),s._v(\"，则只有 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 中的一部分数据会迁移到 \"),e(\"code\",[s._v(\"node5\")]),s._v(\"；如果去掉 \"),e(\"code\",[s._v(\"node2\")]),s._v(\"，则原 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 中的数据只会迁移到 \"),e(\"code\",[s._v(\"node4\")]),s._v(\" 中，只有 \"),e(\"code\",[s._v(\"node4\")]),s._v(\" 会受影响。\")]),s._v(\" \"),e(\"p\",[s._v(\"一致性哈希分区的主要问题在于，当 \"),e(\"strong\",[s._v(\"节点数量较少\")]),s._v(\" 时，增加或删减节点，\"),e(\"strong\",[s._v(\"对单个节点的影响可能很大\")]),s._v(\"，造成数据的严重不平衡。还是以上图为例，如果去掉 \"),e(\"code\",[s._v(\"node2\")]),s._v(\"，\"),e(\"code\",[s._v(\"node4\")]),s._v(\" 中的数据由总数据的 \"),e(\"code\",[s._v(\"1/4\")]),s._v(\" 左右变为 \"),e(\"code\",[s._v(\"1/2\")]),s._v(\" 左右，与其他节点相比负载过高。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"方案三-带有虚拟节点的一致性哈希分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案三-带有虚拟节点的一致性哈希分区\"}},[s._v(\"#\")]),s._v(\" 方案三：带有虚拟节点的一致性哈希分区\")]),s._v(\" \"),e(\"p\",[s._v(\"该方案在 \"),e(\"strong\",[s._v(\"一致性哈希分区的基础上\")]),s._v(\"，引入了 \"),e(\"strong\",[s._v(\"虚拟节点\")]),s._v(\" 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为 \"),e(\"strong\",[s._v(\"槽（slot）\")]),s._v(\"。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。\")]),s._v(\" \"),e(\"p\",[s._v(\"在使用了槽的一致性哈希分区中，\"),e(\"strong\",[s._v(\"槽是数据管理和迁移的基本单位\")]),s._v(\"。槽 \"),e(\"strong\",[s._v(\"解耦\")]),s._v(\" 了 \"),e(\"strong\",[s._v(\"数据和实际节点\")]),s._v(\" 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 \"),e(\"code\",[s._v(\"4\")]),s._v(\" 个实际节点，假设为其分配 \"),e(\"code\",[s._v(\"16\")]),s._v(\" 个槽(0-15)；\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"槽 0-3 位于 node1；4-7 位于 node2；以此类推….\")])]),s._v(\" \"),e(\"p\",[s._v(\"如果此时删除 \"),e(\"code\",[s._v(\"node2\")]),s._v(\"，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 \"),e(\"code\",[s._v(\"node1\")]),s._v(\"，槽 6 分配给 \"),e(\"code\",[s._v(\"node3\")]),s._v(\"，槽 7 分配给 \"),e(\"code\",[s._v(\"node4\")]),s._v(\"；可以看出删除 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 后，数据在其他节点的分布仍然较为均衡。\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"节点通信机制简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#节点通信机制简析\"}},[s._v(\"#\")]),s._v(\" 节点通信机制简析\")]),s._v(\" \"),e(\"p\",[s._v(\"集群的建立离不开节点之间的通信，例如我们上面在 \"),e(\"em\",[s._v(\"快速体验\")]),s._v(\" 中刚启动六个集群节点之后通过 \"),e(\"code\",[s._v(\"redis-cli\")]),s._v(\" 命令帮助我们搭建起来了集群，实际上背后每个集群之间的两两连接是通过了 \"),e(\"code\",[s._v(\"CLUSTER MEET\")]),s._v(\" 命令发送 \"),e(\"code\",[s._v(\"MEET\")]),s._v(\" 消息完成的，下面我们展开详细说说。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"两个端口\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两个端口\"}},[s._v(\"#\")]),s._v(\" 两个端口\")]),s._v(\" \"),e(\"p\",[s._v(\"在 \"),e(\"strong\",[s._v(\"哨兵系统\")]),s._v(\" 中，节点分为 \"),e(\"strong\",[s._v(\"数据节点\")]),s._v(\" 和 \"),e(\"strong\",[s._v(\"哨兵节点\")]),s._v(\"：前者存储数据，后者实现额外的控制功能。在 \"),e(\"strong\",[s._v(\"集群\")]),s._v(\" 中，没有数据节点与非数据节点之分：\"),e(\"strong\",[s._v(\"所有的节点都存储数据，也都参与集群状态的维护\")]),s._v(\"。为此，集群中的每个节点，都提供了两个 TCP 端口：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"普通端口：\")]),s._v(\" 即我们在前面指定的端口 \"),e(\"em\",[s._v(\"(7000等)\")]),s._v(\"。普通端口主要用于为客户端提供服务 \"),e(\"em\",[s._v(\"（与单机节点类似）\")]),s._v(\"；但在节点间数据迁移时也会使用。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"集群端口：\")]),s._v(\" 端口号是普通端口 + 10000 \"),e(\"em\",[s._v(\"（10000是固定值，无法改变）\")]),s._v(\"，如 \"),e(\"code\",[s._v(\"7000\")]),s._v(\" 节点的集群端口为 \"),e(\"code\",[s._v(\"17000\")]),s._v(\"。\"),e(\"strong\",[s._v(\"集群端口只用于节点之间的通信\")]),s._v(\"，如搭建集群、增减节点、故障转移等操作时节点间的通信；不要使用客户端连接集群接口。为了保证集群可以正常工作，在配置防火墙时，要同时开启普通端口和集群端口。\")])]),s._v(\" \"),e(\"h4\",{attrs:{id:\"gossip-协议\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gossip-协议\"}},[s._v(\"#\")]),s._v(\" Gossip 协议\")]),s._v(\" \"),e(\"p\",[s._v(\"节点间通信，按照通信协议可以分为几种类型：单对单、广播、Gossip 协议等。重点是广播和 Gossip 的对比。\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"广播是指向集群内所有节点发送消息。\"),e(\"strong\",[s._v(\"优点\")]),s._v(\" 是集群的收敛速度快(集群收敛是指集群内所有节点获得的集群信息是一致的)，\"),e(\"strong\",[s._v(\"缺点\")]),s._v(\" 是每条消息都要发送给所有节点，CPU、带宽等消耗较大。\")]),s._v(\" \"),e(\"li\",[s._v(\"Gossip 协议的特点是：在节点数量有限的网络中，\"),e(\"strong\",[s._v(\"每个节点都 “随机” 的与部分节点通信\")]),s._v(\" \"),e(\"em\",[s._v(\"（并不是真正的随机，而是根据特定的规则选择通信的节点）*，经过一番杂乱无章的通信，每个节点的状态很快会达到一致。Gossip 协议的 \"),e(\"strong\",[s._v(\"优点\")]),s._v(\" 有负载 *(比广播)\")]),s._v(\" 低、去中心化、容错性高 \"),e(\"em\",[s._v(\"(因为通信有冗余)\")]),s._v(\" 等；\"),e(\"strong\",[s._v(\"缺点\")]),s._v(\" 主要是集群的收敛速度慢。\")])]),s._v(\" \"),e(\"h4\",{attrs:{id:\"消息类型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息类型\"}},[s._v(\"#\")]),s._v(\" 消息类型\")]),s._v(\" \"),e(\"p\",[s._v(\"集群中的节点采用 \"),e(\"strong\",[s._v(\"固定频率（每秒10次）\")]),s._v(\" 的 \"),e(\"strong\",[s._v(\"定时任务\")]),s._v(\" 进行通信相关的工作：判断是否需要发送消息及消息类型、确定接收节点、发送消息等。如果集群状态发生了变化，如增减节点、槽状态变更，通过节点间的通信，所有节点会很快得知整个集群的状态，使集群收敛。\")]),s._v(\" \"),e(\"p\",[s._v(\"节点间发送的消息主要分为 \"),e(\"code\",[s._v(\"5\")]),s._v(\" 种：\"),e(\"code\",[s._v(\"meet 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"ping 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"pong 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"fail 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"publish 消息\")]),s._v(\"。不同的消息类型，通信协议、发送的频率和时机、接收节点的选择等是不同的：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"MEET 消息：\")]),s._v(\" 在节点握手阶段，当节点收到客户端的 \"),e(\"code\",[s._v(\"CLUSTER MEET\")]),s._v(\" 命令时，会向新加入的节点发送 \"),e(\"code\",[s._v(\"MEET\")]),s._v(\" 消息，请求新节点加入到当前集群；新节点收到 MEET 消息后会回复一个 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"PING 消息：\")]),s._v(\" 集群里每个节点每秒钟会选择部分节点发送 \"),e(\"code\",[s._v(\"PING\")]),s._v(\" 消息，接收者收到消息后会回复一个 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息。\"),e(\"strong\",[s._v(\"PING 消息的内容是自身节点和部分其他节点的状态信息\")]),s._v(\"，作用是彼此交换信息，以及检测节点是否在线。\"),e(\"code\",[s._v(\"PING\")]),s._v(\" 消息使用 Gossip 协议发送，接收节点的选择兼顾了收敛速度和带宽成本，\"),e(\"strong\",[s._v(\"具体规则如下\")]),s._v(\"：(1)随机找 5 个节点，在其中选择最久没有通信的 1 个节点；(2)扫描节点列表，选择最近一次收到 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息时间大于 \"),e(\"code\",[s._v(\"cluster_node_timeout / 2\")]),s._v(\" 的所有节点，防止这些节点长时间未更新。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"PONG消息：\")]),s._v(\" \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息封装了自身状态数据。可以分为两种：\"),e(\"strong\",[s._v(\"第一种\")]),s._v(\" 是在接到 \"),e(\"code\",[s._v(\"MEET/PING\")]),s._v(\" 消息后回复的 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息；\"),e(\"strong\",[s._v(\"第二种\")]),s._v(\" 是指节点向集群广播 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息，这样其他节点可以获知该节点的最新信息，例如故障恢复后新的主节点会广播 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"FAIL 消息：\")]),s._v(\" 当一个主节点判断另一个主节点进入 \"),e(\"code\",[s._v(\"FAIL\")]),s._v(\" 状态时，会向集群广播这一 \"),e(\"code\",[s._v(\"FAIL\")]),s._v(\" 消息；接收节点会将这一 \"),e(\"code\",[s._v(\"FAIL\")]),s._v(\" 消息保存起来，便于后续的判断。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"PUBLISH 消息：\")]),s._v(\" 节点收到 \"),e(\"code\",[s._v(\"PUBLISH\")]),s._v(\" 命令后，会先执行该命令，然后向集群广播这一消息，接收节点也会执行该 \"),e(\"code\",[s._v(\"PUBLISH\")]),s._v(\" 命令。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"数据结构简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构简析\"}},[s._v(\"#\")]),s._v(\" 数据结构简析\")]),s._v(\" \"),e(\"p\",[s._v(\"节点需要专门的数据结构来存储集群的状态。所谓集群的状态，是一个比较大的概念，包括：集群是否处于上线状态、集群中有哪些节点、节点是否可达、节点的主从状态、槽的分布……\")]),s._v(\" \"),e(\"p\",[s._v(\"节点为了存储集群状态而提供的数据结构中，最关键的是 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"clusterState\")]),s._v(\" 结构：前者记录了一个节点的状态，后者记录了集群作为一个整体的状态。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"clusternode-结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clusternode-结构\"}},[s._v(\"#\")]),s._v(\" clusterNode 结构\")]),s._v(\" \"),e(\"p\",[e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 结构保存了 \"),e(\"strong\",[s._v(\"一个节点的当前状态\")]),s._v(\"，包括创建时间、节点 id、ip 和端口号等。每个节点都会用一个 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 结构记录自己的状态，并为集群内所有其他节点都创建一个 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 结构来记录节点状态。\")]),s._v(\" \"),e(\"p\",[s._v(\"下面列举了 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 的部分字段，并说明了字段的含义和作用：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-c extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"typedef\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"clusterNode\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点创建时间\")]),s._v(\"\\n    mstime_t ctime\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点id\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"REDIS_CLUSTER_NAMELEN\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点的ip和端口号\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" ip\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"REDIS_IP_STR_LEN\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" port\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点标识：整型，每个bit都代表了不同状态，如节点的主从状态、是否在线、是否在握手等\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" flags\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//配置纪元：故障转移时起作用，类似于哨兵的配置纪元\")]),s._v(\"\\n    uint64_t configEpoch\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//槽在该节点中的分布：占用16384/8个字节，16384个比特；每个比特对应一个槽：比特值为1，则该比特对应的槽在节点中；比特值为0，则该比特对应的槽不在节点中\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"unsigned\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" slots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16384\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点中槽的数量\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" numslots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    …………\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" clusterNode\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"除了上述字段，\"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 还包含节点连接、主从复制、故障发现和转移需要的信息等。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"clusterstate-结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clusterstate-结构\"}},[s._v(\"#\")]),s._v(\" clusterState 结构\")]),s._v(\" \"),e(\"p\",[e(\"code\",[s._v(\"clusterState\")]),s._v(\" 结构保存了在当前节点视角下，集群所处的状态。主要字段包括：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-c extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"typedef\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"clusterState\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//自身节点\")]),s._v(\"\\n    clusterNode \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"myself\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//配置纪元\")]),s._v(\"\\n    uint64_t currentEpoch\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//集群状态：在线还是下线\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" state\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//集群中至少包含一个槽的节点数量\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" size\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//哈希表，节点名称->clusterNode节点指针\")]),s._v(\"\\n    dict \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"nodes\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//槽分布信息：数组的每个元素都是一个指向clusterNode结构的指针；如果槽还没有分配给任何节点，则为NULL\")]),s._v(\"\\n    clusterNode \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"slots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16384\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    …………\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" clusterState\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"除此之外，\"),e(\"code\",[s._v(\"clusterState\")]),s._v(\" 还包括故障转移、槽迁移等需要的信息。\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"更多关于集群内容请自行阅读《Redis 设计与实现》，其中有更多细节方面的介绍 - http://redisbook.com/\")])])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}
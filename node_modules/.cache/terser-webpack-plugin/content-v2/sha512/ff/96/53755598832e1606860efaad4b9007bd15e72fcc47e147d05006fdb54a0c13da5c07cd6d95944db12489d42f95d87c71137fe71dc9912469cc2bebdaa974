{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{635:function(v,_,e){\"use strict\";e.r(_);var s=e(6),t=Object(s.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[e(\"h2\",{attrs:{id:\"一、redis-基础问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、redis-基础问题\"}},[v._v(\"#\")]),v._v(\" 一、Redis 基础问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis是什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis是什么\"}},[v._v(\"#\")]),v._v(\" Redis是什么\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis：\"),e(\"strong\",[v._v(\"REmote DIctionary Server\")]),v._v(\"(远程字典服务器)。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 是一个全开源免费（BSD许可）的，内存中的数据结构存储系统，它可以用作\"),e(\"strong\",[v._v(\"数据库、缓存和消息中间件\")]),v._v(\"，\")]),v._v(\" \"),e(\"p\",[v._v(\"和 Memcached 类似，它支持存储的 value 类型相对更多，包括\"),e(\"strong\",[v._v(\"string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）、bitmap、hyperloglog、GeoHash、streams\")]),v._v(\"。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 内置了复制（Replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（Transactions） 和不同级别的磁盘持久化（Persistence），并通过 Redis 哨兵（Sentinel）和自动分区（Cluster）提供高可用性（High Availability）。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"性能优秀，数据在内存中，读写速度非常快，支持并发10W QPS\")]),v._v(\" \"),e(\"li\",[v._v(\"单进程单线程，是线程安全的，采用IO多路复用机制\")]),v._v(\" \"),e(\"li\",[v._v(\"Redis 数据库完全在内存中，使用磁盘仅用于持久性\")]),v._v(\" \"),e(\"li\",[v._v(\"相比许多键值数据存储，Redis 拥有一套较为丰富的数据类型\")]),v._v(\" \"),e(\"li\",[v._v(\"操作都是\"),e(\"strong\",[v._v(\"原子性\")]),v._v(\"：所有 Redis 操作是原子的，这保证了如果两个客户端同时访问的Redis服务器将获得更新后的值\")]),v._v(\" \"),e(\"li\",[v._v(\"Redis 可以将数据复制到任意数量的从服务器（主从复制，哨兵，高可用）\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-都支持哪些数据类型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-都支持哪些数据类型\"}},[v._v(\"#\")]),v._v(\" Redis 都支持哪些数据类型\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 不是简单的键值存储，它实际上是一个数据结构服务器，支持不同类型的值。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"String（字符串）：二进制安全字符串\")]),v._v(\" \"),e(\"li\",[v._v(\"List（列表）：根据插入顺序排序的字符串元素的集合。它们基本上是链表\")]),v._v(\" \"),e(\"li\",[v._v(\"Hash（字典）：是一个键值对集合。KV模式不变，但V是一个键值对\")]),v._v(\" \"),e(\"li\",[v._v(\"Set（集合）：唯一，未排序的字符串元素的集合\")]),v._v(\" \"),e(\"li\",[v._v(\"zset(sorted set：有序集合)：相当于有序的 Set集合，每个字符串元素都与一个称为 \"),e(\"em\",[v._v(\"score\")]),v._v(\" 的浮点值相关联。元素总是按它们的分数排序（eg，找出前10名或后10名）\")])]),v._v(\" \"),e(\"p\",[v._v(\"除了支持最 \"),e(\"strong\",[v._v(\"基础的五种数据类型\")]),v._v(\" 外，还支持一些 \"),e(\"strong\",[v._v(\"高级数据类型\")]),v._v(\"：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"Bit arrays （位数组，简称位图 bitMap）：\")]),v._v(\" \"),e(\"li\",[v._v(\"HyperLogLog（）：这是一个概率数据结构，用于估计集合的基数\")]),v._v(\" \"),e(\"li\",[v._v(\"Geo\")]),v._v(\" \"),e(\"li\",[v._v(\"Stream：\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"那你能说说这些数据类型的使用指令吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#那你能说说这些数据类型的使用指令吗\"}},[v._v(\"#\")]),v._v(\" 那你能说说这些数据类型的使用指令吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"String：就是基本的 SET、GET、MSET、MGET、INCR、DECR\")]),v._v(\" \"),e(\"p\",[v._v(\"List：LPUSH、RPUSH、LRANGE、LINDEX\")]),v._v(\" \"),e(\"p\",[v._v(\"Hash：HSET、HMSET、HSETNX、HKEYS、HVALS\")]),v._v(\" \"),e(\"p\",[v._v(\"Set：SADD、SCARD、SDIFF、SREM\")]),v._v(\" \"),e(\"p\",[v._v(\"SortSet：ZADD、ZCARD、ZCOUNT、ZRANGE\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"为什么要用缓存-为什么使用-redis\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要用缓存-为什么使用-redis\"}},[v._v(\"#\")]),v._v(\" 为什么要用缓存？为什么使用 Redis？\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"提一下现在 Web 应用的现状\")])]),v._v(\" \"),e(\"p\",[v._v(\"在日常的 Web 应用对数据库的访问中，\"),e(\"strong\",[v._v(\"读操作的次数远超写操作\")]),v._v(\"，比例大概在 \"),e(\"strong\",[v._v(\"1:9\")]),v._v(\" 到 \"),e(\"strong\",[v._v(\"3:7\")]),v._v(\"，所以需要读的可能性是比写的可能大得多的。当我们使用 SQL 语句去数据库进行读写操作时，数据库就会 \"),e(\"strong\",[v._v(\"去磁盘把对应的数据索引取回来\")]),v._v(\"，这是一个相对较慢的过程。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"使用 Redis or 使用缓存带来的优势\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果我们把数据放在 Redis 中，也就是直接放在内存之中，让服务端直接去读取内存中的数据，那么这样 \"),e(\"strong\",[v._v(\"速度\")]),v._v(\" 明显就会快上不少 \"),e(\"em\",[v._v(\"(高性能)\")]),v._v(\"，并且会 \"),e(\"strong\",[v._v(\"极大减小数据库的压力\")]),v._v(\" \"),e(\"em\",[v._v(\"(特别是在高并发情况下)\")]),v._v(\"。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"也要提一下使用缓存的考虑\")])]),v._v(\" \"),e(\"p\",[v._v(\"但是使用内存进行数据存储开销也是比较大的，\"),e(\"strong\",[v._v(\"限于成本\")]),v._v(\" 的原因，一般我们只是使用 Redis 存储一些 \"),e(\"strong\",[v._v(\"常用和主要的数据\")]),v._v(\"，比如用户登录的信息等。\")]),v._v(\" \"),e(\"p\",[v._v(\"一般而言在使用 Redis 进行存储的时候，我们需要从以下几个方面来考虑：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"业务数据常用吗？命中率如何？\")]),v._v(\" 如果命中率很低，就没有必要写入缓存；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"该业务数据是读操作多，还是写操作多？\")]),v._v(\" 如果写操作多，频繁需要写入数据库，也没有必要使用缓存；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"业务数据大小如何？\")]),v._v(\" 如果要存储几百兆字节的文件，会给缓存带来很大的压力，这样也没有必要；\")])]),v._v(\" \"),e(\"p\",[v._v(\"在考虑了这些问题之后，如果觉得有必要使用缓存，那么就使用它！\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"这些都会-那你能说说-redis-使用场景不-你们项目中是怎么用的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#这些都会-那你能说说-redis-使用场景不-你们项目中是怎么用的\"}},[v._v(\"#\")]),v._v(\" 这些都会，那你能说说 Redis 使用场景不，你们项目中是怎么用的\")]),v._v(\" \"),e(\"p\",[v._v(\"在 Redis 中，常用的 5 种数据结构和应用场景如下：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"String\")]),v._v(\"：缓存、计数器、分布式锁等。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得+1，并发量高时如果每次都请求数据库操作无疑会对数据库提出挑战。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。\")]),v._v(\" \"),e(\"li\",[v._v(\"在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"List\")]),v._v(\"：链表、队列、微博关注人时间轴列表等。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"Hash\")]),v._v(\"：用户信息、Hash 表等。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"Set\")]),v._v(\"：\"),e(\"strong\",[v._v(\"社交网络\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"Zset\")]),v._v(\"：访问量排行榜、点击量排行榜等\")])])]),v._v(\" \"),e(\"p\",[v._v(\"还有一些，比如：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[v._v(\"取最新N个数据的操作\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"需要精确设定过期时间的应用\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"Uniq操作,获取某段时间所有数据排重值\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"实时系统,反垃圾系统\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"Pub/Sub构建实时消息系统\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"构建队列系统\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"分布式会话\")])])])]),v._v(\" \"),e(\"p\",[v._v(\"集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"用缓存-肯定是因为他快-那-redis-为什么这么快\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用缓存-肯定是因为他快-那-redis-为什么这么快\"}},[v._v(\"#\")]),v._v(\" 用缓存，肯定是因为他快，那 Redis 为什么这么快\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"纯内存操作\")]),v._v(\"：读取不需要进行磁盘 I/O，所以比传统数据库要快上不少；\"),e(\"em\",[v._v(\"(但不要有误区说磁盘就一定慢，例如 Kafka 就是使用磁盘顺序读取但仍然较快)\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"用hash table作为键空间，查找任意的key只需O(1)\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"单线程，无锁竞争\")]),v._v(\"：天生的队列模式，避免了因多线程竞争而导致的上下文切换和抢锁的开销\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"事件机制，Redis服务器将所有处理的任务分为两类事件，一类是采用I/O多路复用处理客户端请求的网络事件；一类是处理定时任务的时间事件，包括更新统计信息、清理过期键、持久化、主从同步等；\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"多路 I/O 复用模型，非阻塞 I/O\")]),v._v(\"：采用多路 I/O 复用技术可以让单个线程高效的处理多个网络连接请求（尽量减少网络 IO 的时间消耗）；\")])])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"高效的数据结构，加上底层做了大量优化\")]),v._v(\"：Redis 对于底层的数据结构和内存占用做了大量的优化，例如不同长度的字符串使用不同的结构体表示，HyperLogLog 的密集型存储结构等等..\")])])]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[e(\"strong\",[v._v(\"I/O多路复用，I/O就是指的我们网络I/O，多路指多个TCP连接(或多个Channel)，复用指复用一个或少量线程。串起来理解就是很多个网络I/O复用一个或少量的线程来处理这些连接。\")])])]),v._v(\" \"),e(\"p\",[v._v(\"当然这种单线程事件机制也是有缺陷的，由于所有的事件都是串行执行，一旦某个事件比较重就会阻塞其它事件，从而导致整个系统的吞吐率下降。比如某个客户端执行了一个比较重的lua函数、或者使用了诸如keys*、zrange(0,-1)、hgetall等全集合扫描的操作，又或者删除的过期键是个big key，又或者使用了较多内存的redis实例进行bgsave时，都会导致服务器一定程度的阻塞，一般伴随会有相应的慢日志。所以我们在实际使用redis的过程中，必须要给每一次的操作分配合理的时间片。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-属于单线程还是多线程\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-属于单线程还是多线程\"}},[v._v(\"#\")]),v._v(\" Redis 属于单线程还是多线程？\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"这道题其实就在考察 Redis 的线程模型（这几乎是 Redis 必问的问题之一）。\")])]),v._v(\" \"),e(\"p\",[v._v(\"很多初级研发工程师基本都知道 Redis 是单线程的，并且能说出 Redis 单线程的一些优缺点，比如，实现简单，可以在无锁的情况下完成所有操作，不存在死锁和线程切换带来的性能和时间上的开销，但同时单线程也不能发挥多核 CPU 的性能。\")]),v._v(\" \"),e(\"p\",[v._v(\"很明显，如果你停留在上面的回答思路上，只能勉强及格，因为对于这样一道经典的面试题，你回答得没有亮点，几乎丧失了机会。一个相对完整的思路应该基于 Redis 单线程，补充相关的知识点，比如：\")]),v._v(\" \"),e(\"p\",[v._v(\"如：\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 只有单线程吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 是单线程的，主要是指 Redis 的网络 I/O 线程，以及键值的 SET 和 GET 等读写操作都是由一个线程来完成的。但 Redis 的持久化、集群同步等操作，则是由另外的线程来执行的。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 采用单线程为什么还这么快？\")]),v._v(\" \"),e(\"p\",[v._v(\"一般来说，单线程的处理能力应该要比多线程差才对，但为什么 Redis 还能达到每秒数万级的处理能力呢？主要有如下几个原因。\")]),v._v(\" \"),e(\"p\",[v._v(\"首先，一个重要的原因是，Redis 的大部分操作都在内存中完成，并且采用了高效的数据结构，比如哈希表和跳表。\")]),v._v(\" \"),e(\"p\",[v._v(\"其次，因为是单线程模型避免了多线程之间的竞争，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。\")]),v._v(\" \"),e(\"p\",[v._v(\"最后，也是最重要的一点， Redis 采用了 I/O 多路复用机制处理大量的客户端 Socket 请求，这让 Redis 可以高效地进行网络通信，因为基于非阻塞的 I/O 模型，就意味着 I/O 的读写流程不再阻塞。\")]),v._v(\" \"),e(\"p\",[v._v(\"但是因为 Redis 不同版本的特殊性，所以对于 Redis 的线程模型要分版本来看。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 4.0 版本之前，使用单线程速度快的原因就是上述的几个原因；\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 4.0 版本之后，Redis 添加了多线程的支持，但这时的多线程主要体现在大数据的异步删除功能上，例如 unlink key、flushdb async、flushall async 等。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 6.0 版本之后，为了更好地提高 Redis 的性能，新增了多线程 I/O 的读写并发能力，但是在面试中，能把 Redis 6.0 中的多线程模型回答上来的人很少，如果你能在面试中补充 Redis 6.0 多线程的原理，势必会增加面试官对你的认可。\")]),v._v(\" \"),e(\"p\",[v._v(\"你可以在面试中这样补充：\")]),v._v(\" \"),e(\"p\",[v._v(\"虽然 Redis 一直是单线程模型，但是在 Redis 6.0 版本之后，也采用了多个 I/O 线程来处理网络请求，这是因为随着网络硬件的性能提升，Redis 的性能瓶颈有时会出现在网络 I/O 的处理上，所以为了提高网络请求处理的并行度，Redis 6.0 对于网络请求采用多线程来处理。但是对于读写命令，Redis 仍然使用单线程来处理。\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"很多同学对单线程有些疑问，简单的解释一下 redis 单线程的意思，redis 服务端虽说是单线程，但是可以同时 持有很多connection，每个connection 都可以同时发请求，只不过在 redis 服务端，一个一个的处理每个connection 发过来的request， 通俗点说就是，很多请求都能发过来，（其实是存在每个connection socket 内核缓冲区），一个一个处理。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"为什么早期版本的-redis-选择单线程\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么早期版本的-redis-选择单线程\"}},[v._v(\"#\")]),v._v(\" 为什么早期版本的 Redis 选择单线程？\")]),v._v(\" \"),e(\"p\",[v._v(\"我们首先要明白，上边的种种分析，都是为了营造一个 Redis 很快的氛围！官方FAQ表示，因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）。\")]),v._v(\" \"),e(\"p\",[v._v(\"看到这里，你可能会气哭！本以为会有什么重大的技术要点才使得Redis使用单线程就可以这么快，没想到就是一句官方看似糊弄我们的回答！但是，我们已经可以很清楚的解释了为什么Redis这么快，并且正是由于在单线程模式的情况下已经很快了，就没有必要在使用多线程了！\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"简单总结一下\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简单总结一下\"}},[v._v(\"#\")]),v._v(\" 简单总结一下\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"使用单线程模型能带来更好的可维护性，方便开发和调试；\")]),v._v(\" \"),e(\"li\",[v._v(\"使用单线程模型也能并发的处理客户端的请求；\")]),v._v(\" \"),e(\"li\",[v._v(\"Redis 服务中运行的绝大多数操作的性能瓶颈都不是 CPU；\")])]),v._v(\" \"),e(\"p\",[v._v(\"这里我们一直在强调的单线程，只是在处理我们的网络请求的时候只有一个线程来处理，一个正式的Redis Server运行的时候肯定是不止一个线程的，这里需要大家明确的注意一下！例如Redis进行持久化的时候会以子进程或者子线程的方式执行；\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 选择使用单线程模型处理客户端的请求主要还是因为 CPU 不是 Redis 服务器的瓶颈，所以使用多线程模型带来的性能提升并不能抵消它带来的开发成本和维护成本，系统的性能瓶颈也主要在网络 I/O 操作上；而 Redis 引入多线程操作也是出于性能上的考虑，对于一些大键值对的删除操作，通过多线程非阻塞地释放内存空间也能减少对 Redis 主线程阻塞的时间，提高执行的效率。\")]),v._v(\" \"),e(\"p\",[v._v(\"推荐阅读：https://draveness.me/whys-the-design-redis-single-thread/\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-和-memcached-的区别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-和-memcached-的区别\"}},[v._v(\"#\")]),v._v(\" Redis 和 Memcached 的区别\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性。\")]),v._v(\" \"),e(\"li\",[v._v(\"数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，而redis支持五种数据类型。\")]),v._v(\" \"),e(\"li\",[v._v(\"使用底层模型不同：它们之间底层实现方式以及与客户端之间通信的应用协议不一样。redis直接自己构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。\")]),v._v(\" \"),e(\"li\",[v._v(\"value的大小：redis可以达到1GB，而memcache只有1MB。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-线程模型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-线程模型\"}},[v._v(\"#\")]),v._v(\" Redis 线程模型\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 基于 Reactor 模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以 Redis 才叫单线程模型。\")]),v._v(\" \"),e(\"p\",[v._v(\"文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。\")]),v._v(\" \"),e(\"p\",[v._v(\"当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。\")]),v._v(\" \"),e(\"p\",[v._v(\"虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字，文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性。\")]),v._v(\" \"),e(\"p\",[v._v(\"参考：https://www.cnblogs.com/barrywxx/p/8570821.html\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-内存模型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-内存模型\"}},[v._v(\"#\")]),v._v(\" Redis 内存模型\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 内存主要可以分为：数据部分、Redis进程本身、缓冲区内存、内存碎片这四个部分。Redis 默认通过jemalloc 来分配内存。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"数据内存\")]),v._v(\"：数据内存用来存储Redis的键值对、慢查询日志等，是主要占用内存的部分，这部分内存会统计在used_memory中\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"Redis进程内存\")]),v._v(\"：Redis进程本身也会占用一部分内存，这部分内存不是jemalloc分配，不会统计在used_memory中。执行RDB和AOF时创建的子进程也会占用内存，但也不会统计在used_memory中。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"缓冲内存\")]),v._v(\"：\")]),v._v(\" \"),e(\"p\",[v._v(\"缓冲内存包括：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"客户端缓冲区：存储客户端连接的输入和输出缓冲\")]),v._v(\" \"),e(\"li\",[v._v(\"复制积压缓冲区：用于PSYNC的部分复制功能\")]),v._v(\" \"),e(\"li\",[v._v(\"AOF缓冲区：AOF操作时，保存最近写入的命令。\")])]),v._v(\" \"),e(\"p\",[v._v(\"这部分内存由jemalloc分配，会被统计在used_memory中\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"内存碎片\")]),v._v(\"：Redis在分配和回收物理内存的过程中会产生内存碎片，这部分不会统计在used_memory中。内存碎片太多的话可以通过安全重启方式减少内存碎片，重启之后Redis会使用RDB或者AOF恢复数据，内存会被重排。\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"最后总结下-redis-优缺点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最后总结下-redis-优缺点\"}},[v._v(\"#\")]),v._v(\" 最后总结下 Redis 优缺点\")]),v._v(\" \"),e(\"p\",[v._v(\"优点\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"读写性能优异\")]),v._v(\"， Redis能读的速度是 \"),e(\"code\",[v._v(\"110000\")]),v._v(\" 次/s，写的速度是 \"),e(\"code\",[v._v(\"81000\")]),v._v(\" 次/s。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"支持数据持久化\")]),v._v(\"，支持 AOF 和 RDB 两种持久化方式。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"支持事务\")]),v._v(\"，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"数据结构丰富\")]),v._v(\"，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"支持主从复制\")]),v._v(\"，主机会自动将数据同步到从机，可以进行读写分离。\")])]),v._v(\" \"),e(\"p\",[v._v(\"缺点\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"数据库 \"),e(\"strong\",[v._v(\"容量受到物理内存的限制\")]),v._v(\"，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。\")]),v._v(\" \"),e(\"li\",[v._v(\"Redis \"),e(\"strong\",[v._v(\"不具备自动容错和恢复功能\")]),v._v(\"，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。\")]),v._v(\" \"),e(\"li\",[v._v(\"主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了 \"),e(\"strong\",[v._v(\"系统的可用性\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"Redis 较难支持在线扩容\")]),v._v(\"，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"key最大是多少-单个实例最多支持多少个key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#key最大是多少-单个实例最多支持多少个key\"}},[v._v(\"#\")]),v._v(\" key最大是多少 ，单个实例最多支持多少个key\")]),v._v(\" \"),e(\"p\",[v._v(\"一个key或是value大小最大是512M\")]),v._v(\" \"),e(\"p\",[v._v(\"一个单实例的redis最多能支持2^32个键，差不多就是2.5亿个，每个key中的值也是可以存 2^32行数据，所以服务器的内存才是我们所担心的。\")]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"二、redis-数据结构问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、redis-数据结构问题\"}},[v._v(\"#\")]),v._v(\" 二、Redis 数据结构问题\")]),v._v(\" \"),e(\"p\",[v._v(\"首先在 Redis 内部会使用一个 \"),e(\"strong\",[v._v(\"RedisObject\")]),v._v(\" 对象来表示所有的 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"value\")]),v._v(\"：\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-16511ec4f7f30569.png\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[v._v(\"Redis 提供了五种基本数据类型，String、Hash、List、Set、Zset(sorted set：有序集合)\")]),v._v(\" \"),e(\"p\",[v._v(\"由于 Redis 是基于标准 C 写的，只有最基础的数据类型，因此 Redis 为了满足对外使用的 5 种数据类型，开发了属于自己\"),e(\"strong\",[v._v(\"独有的一套基础数据结构\")]),v._v(\"，使用这些数据结构来实现5种数据类型。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis底层的数据结构包括：\"),e(\"strong\",[v._v(\"简单动态数组SDS、链表、字典、跳跃链表、整数集合、压缩列表、对象。\")])]),v._v(\" \"),e(\"p\",[v._v(\"Redis 为了平衡空间和时间效率，针对 value 的具体类型在底层会采用不同的数据结构来实现，其中哈希表和压缩列表是复用比较多的数据结构，如下图展示了对外数据类型和底层数据结构之间的映射关系：\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1ge0k8do3s3j30im0el7aa.jpg\",alt:\"\"}})]),v._v(\" \"),e(\"h3\",{attrs:{id:\"string-是如何实现的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-是如何实现的\"}},[v._v(\"#\")]),v._v(\" String 是如何实现的\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 是用 C 语言开发完成的，但在 Redis 字符串中，并没有使用 C 语言中的字符串，而是用一种称为 \"),e(\"strong\",[v._v(\"SDS\")]),v._v(\"（Simple Dynamic String）的结构体来保存字符串。\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gjno8bake1j30rk06dwei.jpg\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gjno8fzv2ej30d207r3yr.jpg\",alt:\"img\"}})]),v._v(\" \"),e(\"p\",[v._v(\"String 是 Redis 最基本的类型，你可以理解成与 Memcached一模一样的类型，一个 key 对应一个 value。\")]),v._v(\" \"),e(\"p\",[v._v(\"String 类型是二进制安全的。意思是 Redis 的 String 可以包含任何数据。比如 jpg 图片或者序列化的对象 。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 的字符串是动态字符串，是可以修改的字符串，\"),e(\"strong\",[v._v(\"内部结构实现上类似于 Java 的 ArrayList\")]),v._v(\"，采用预分配冗余空间的方式来减少内存的频繁分配，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是\"),e(\"strong\",[v._v(\"字符串最大长度为 512M\")])]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"http://ww1.sinaimg.cn/large/9b9f09a9ly1g9ypoobef5j20fw04pq2p.jpg\",alt:\"\"}})]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-的-sds-和-c-中字符串相比有什么优势\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-的-sds-和-c-中字符串相比有什么优势\"}},[v._v(\"#\")]),v._v(\" Redis 的 SDS 和 C 中字符串相比有什么优势？\")]),v._v(\" \"),e(\"p\",[v._v(\"C 语言使用了一个长度为 \"),e(\"code\",[v._v(\"N+1\")]),v._v(\" 的字符数组来表示长度为 \"),e(\"code\",[v._v(\"N\")]),v._v(\" 的字符串，并且字符数组最后一个元素总是 \"),e(\"code\",[v._v(\"\\\\0\")]),v._v(\"，这种简单的字符串表示方式 \"),e(\"strong\",[v._v(\"不符合 Redis 对字符串在安全性、效率以及功能方面的要求\")]),v._v(\"。\")]),v._v(\" \"),e(\"p\",[v._v(\"再来说 C 语言字符串的问题\")]),v._v(\" \"),e(\"p\",[v._v(\"这样简单的数据结构可能会造成以下一些问题：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"获取字符串长度为 O(N) 级别的操作\")]),v._v(\" → 因为 C 不保存数组的长度，每次都需要遍历一遍整个数组；\")]),v._v(\" \"),e(\"li\",[v._v(\"不能很好的杜绝 \"),e(\"strong\",[v._v(\"缓冲区溢出/内存泄漏\")]),v._v(\" 的问题 → 跟上述问题原因一样，如果执行拼接 or 缩短字符串的操作，如果操作不当就很容易造成上述问题；\")]),v._v(\" \"),e(\"li\",[v._v(\"C 字符串 \"),e(\"strong\",[v._v(\"只能保存文本数据\")]),v._v(\" → 因为 C 语言中的字符串必须符合某种编码（比如 ASCII），例如中间出现的 \"),e(\"code\",[v._v(\"'\\\\0'\")]),v._v(\" 可能会被判定为提前结束的字符串而识别不了；\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"Redis 如何解决的 | SDS 的优势\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果去看 Redis 的源码 \"),e(\"code\",[v._v(\"sds.h/sdshdr\")]),v._v(\" 文件，你会看到 SDS 完整的实现细节，这里简单来说一下 Redis 如何解决的：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[v._v(\"多增加 len 表示当前字符串的长度\")]),v._v(\"：这样就可以直接获取长度了，复杂度 O(1)；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"自动扩展空间\")]),v._v(\"：当 SDS 需要对字符串进行修改时，首先借助于 \"),e(\"code\",[v._v(\"len\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"alloc\")]),v._v(\" 检查空间是否满足修改所需的要求，如果空间不够的话，SDS 会自动扩展空间，避免了像 C 字符串操作中的覆盖情况；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"有效降低内存分配次数\")]),v._v(\"：C 字符串在涉及增加或者清除操作时会改变底层数组的大小造成重新分配，SDS 使用了 \"),e(\"strong\",[v._v(\"空间预分配\")]),v._v(\" 和 \"),e(\"strong\",[v._v(\"惰性空间释放\")]),v._v(\" 机制，简单理解就是每次在扩展时是成倍的多分配的，在缩容是也是先留着并不正式归还给 OS；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"二进制安全\")]),v._v(\"：C 语言字符串只能保存 \"),e(\"code\",[v._v(\"ascii\")]),v._v(\" 码，对于图片、音频等信息无法保存，SDS 是二进制安全的，写入什么读取就是什么，不做任何过滤和限制；\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"说说-list\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说说-list\"}},[v._v(\"#\")]),v._v(\" 说说 List\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组\")]),v._v(\"。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"Redis 的列表结构常用来做异步队列使用\")]),v._v(\"。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。\")]),v._v(\" \"),e(\"p\",[v._v(\"在版本3.2之前，Redis 列表list使用两种数据结构作为底层实现：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"压缩列表ziplist\")]),v._v(\" \"),e(\"li\",[v._v(\"双向链表linkedlist\\n因为双向链表占用的内存比压缩列表要多， 所以当创建新的列表键时， 列表会优先考虑使用压缩列表， 并且在有需要的时候， 才从压缩列表实现转换到双向链表实现。\")])]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"创建新列表时 redis 默认使用 redis_encoding_ziplist 编码， 当以下任意一个条件被满足时， 列表会被转换成 redis_encoding_linkedlist 编码：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"试图往列表新添加一个字符串值，且这个字符串的长度超过 server.list_max_ziplist_value （默认值为 64 ）。\")]),v._v(\" \"),e(\"li\",[v._v(\"ziplist 包含的节点超过 server.list_max_ziplist_entries （默认值为 512 ）。\")])]),v._v(\" \"),e(\"p\",[v._v(\"注意：这两个条件是可以修改的，在 redis.conf 中：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-text extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[v._v(\"list-max-ziplist-value 64 \\nlist-max-ziplist-entries 512 \\n\")])])]),e(\"h5\",{attrs:{id:\"双向链表linkedlist\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#双向链表linkedlist\"}},[v._v(\"#\")]),v._v(\" \"),e(\"strong\",[v._v(\"双向链表linkedlist\")])]),v._v(\" \"),e(\"p\",[v._v(\"当链表entry数据超过512、或单个value 长度超过64，底层就会转化成linkedlist编码；\\nlinkedlist是标准的双向链表，Node节点包含prev和next指针，可以进行双向遍历；\\n还保存了 head 和 tail 两个指针，因此，对链表的表头和表尾进行插入的复杂度都为 (1) —— 这是高效实现 LPUSH 、 RPOP、 RPOPLPUSH 等命令的关键。\\nlinkedlist比较简单，我们重点来分析ziplist。\")]),v._v(\" \"),e(\"h5\",{attrs:{id:\"压缩列表ziplist\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#压缩列表ziplist\"}},[v._v(\"#\")]),v._v(\" 压缩列表ziplist\")]),v._v(\" \"),e(\"p\",[v._v(\"压缩列表 ziplist 是为 Redis 节约内存而开发的。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis官方对于ziplist的定义是（出自ziplist.c的文件头部注释）：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-text extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[v._v(\"/* The ziplist is a specially encoded dually linked list that is designed\\n * to be very memory efficient. It stores both strings and integer values,\\n * where integers are encoded as actual integers instead of a series of\\n * characters. It allows push and pop operations on either side of the list\\n * in O(1) time. However, because every operation requires a reallocation of\\n * the memory used by the ziplist, the actual complexity is related to the\\n * amount of memory used by the ziplist.\\n *\\n\")])])]),e(\"p\",[v._v(\"ziplist 是由一系列特殊编码的内存块构成的列表(像内存连续的数组，但每个元素长度不同)， 一个 ziplist 可以包含多个节点（entry）。\\nziplist 将表中每一项存放在前后连续的地址空间内，每一项因占用的空间不同，而采用变长编码。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"ziplist 是一个特殊的双向链表\")]),v._v(\"\\n特殊之处在于：没有维护双向指针:prev next；而是存储上一个 entry的长度和 当前entry的长度，通过长度推算下一个元素在什么地方。\\n牺牲读取的性能，获得高效的存储空间，因为(简短字符串的情况)存储指针比存储entry长度 更费内存。这是典型的“时间换空间”。\")]),v._v(\" \"),e(\"h5\",{attrs:{id:\"redis3-2-list的新实现quicklist\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis3-2-list的新实现quicklist\"}},[v._v(\"#\")]),v._v(\" Redis3.2+ list的新实现quickList\")]),v._v(\" \"),e(\"p\",[v._v(\"可以认为quickList，是ziplist和linkedlist二者的结合；quickList将二者的优点结合起来。\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://hunter-image.oss-cn-beijing.aliyuncs.com/redis/quicklist/QuickList.png\",alt:\"img\"}})]),v._v(\" \"),e(\"p\",[v._v(\"quickList就是一个标准的双向链表的配置，有head 有tail;\\n每一个节点是一个quicklistNode，包含prev和next指针。\\n每一个quicklistNode 包含 一个ziplist，*zp 压缩链表里存储键值。\\n所以quicklist是对ziplist进行一次封装，使用小块的ziplist来既保证了少使用内存，也保证了性能。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"字典hash是如何实现的-rehash-了解吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字典hash是如何实现的-rehash-了解吗\"}},[v._v(\"#\")]),v._v(\" 字典Hash是如何实现的？Rehash 了解吗？\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"Redis\")]),v._v(\" 中的字典相当于 Java 中的 \"),e(\"strong\",[v._v(\"HashMap\")]),v._v(\"，内部实现也差不多类似，都是通过 \"),e(\"strong\",[v._v(\"“数组 + 链表”\")]),v._v(\" 的 \"),e(\"strong\",[v._v(\"链地址法\")]),v._v(\" 来解决部分哈希冲突，同时这样的结构也吸收了两种不同数据结构的优点。\")]),v._v(\" \"),e(\"p\",[v._v(\"字典结构内部包含 \"),e(\"strong\",[v._v(\"两个 hashtable\")]),v._v(\"，通常情况下只有一个 \"),e(\"code\",[v._v(\"hashtable\")]),v._v(\" 有值，但是在字典扩容缩容时，需要分配新的 \"),e(\"code\",[v._v(\"hashtable\")]),v._v(\"，然后进行 \"),e(\"strong\",[v._v(\"渐进式搬迁\")]),v._v(\" \"),e(\"em\",[v._v(\"(rehash)\")]),v._v(\"，这时候两个 \"),e(\"code\",[v._v(\"hashtable\")]),v._v(\" 分别存储旧的和新的 \"),e(\"code\",[v._v(\"hashtable\")]),v._v(\"，待搬迁结束后，旧的将被删除，新的 \"),e(\"code\",[v._v(\"hashtable\")]),v._v(\" 取而代之。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"扩缩容的条件\")])]),v._v(\" \"),e(\"p\",[v._v(\"正常情况下，当 hash 表中 \"),e(\"strong\",[v._v(\"元素的个数等于第一维数组的长度时\")]),v._v(\"，就会开始扩容，扩容的新数组是 \"),e(\"strong\",[v._v(\"原数组大小的 2 倍\")]),v._v(\"。不过如果 Redis 正在做 \"),e(\"code\",[v._v(\"bgsave(持久化命令)\")]),v._v(\"，为了减少内存也得过多分离，Redis 尽量不去扩容，但是如果 hash 表非常满了，\"),e(\"strong\",[v._v(\"达到了第一维数组长度的 5 倍了\")]),v._v(\"，这个时候就会 \"),e(\"strong\",[v._v(\"强制扩容\")]),v._v(\"。\")]),v._v(\" \"),e(\"p\",[v._v(\"当 hash 表因为元素逐渐被删除变得越来越稀疏时，Redis 会对 hash 表进行缩容来减少 hash 表的第一维数组空间占用。所用的条件是 \"),e(\"strong\",[v._v(\"元素个数低于数组长度的 10%\")]),v._v(\"，缩容不会考虑 Redis 是否在做 \"),e(\"code\",[v._v(\"bgsave\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"说说-zset-吧\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说说-zset-吧\"}},[v._v(\"#\")]),v._v(\" 说说 Zset 吧\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"它类似于 Java 的 SortedSet 和 HashMap 的结合体\")]),v._v(\"，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 正是通过 score 来为集合中的成员进行从小到大的排序。Zset 的成员是唯一的，但 score 却可以重复。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"跳跃表是如何实现的-原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#跳跃表是如何实现的-原理\"}},[v._v(\"#\")]),v._v(\" 跳跃表是如何实现的？原理？\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://redisbook.readthedocs.io/en/latest/_images/skiplist.png\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[v._v(\"从图中可以看到， 跳跃表主要由以下部分构成：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"表头（head）：负责维护跳跃表的节点指针。\")]),v._v(\" \"),e(\"li\",[v._v(\"跳跃表节点：保存着元素值，以及多个层。\")]),v._v(\" \"),e(\"li\",[v._v(\"层：保存着指向其他元素的指针。高层的指针越过的元素数量大于等于低层的指针，为了提高查找的效率，程序总是从高层先开始访问，然后随着元素值范围的缩小，慢慢降低层次。\")]),v._v(\" \"),e(\"li\",[v._v(\"表尾：全部由 \"),e(\"code\",[v._v(\"NULL\")]),v._v(\" 组成，表示跳跃表的末尾。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"压缩列表了解吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#压缩列表了解吗\"}},[v._v(\"#\")]),v._v(\" 压缩列表了解吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"这是 Redis \"),e(\"strong\",[v._v(\"为了节约内存\")]),v._v(\" 而使用的一种数据结构，\"),e(\"strong\",[v._v(\"zset\")]),v._v(\" 和 \"),e(\"strong\",[v._v(\"hash\")]),v._v(\" 容器对象会在元素个数较少的时候，采用压缩列表（ziplist）进行存储。压缩列表是 \"),e(\"strong\",[v._v(\"一块连续的内存空间\")]),v._v(\"，元素之间紧挨着存储，没有任何冗余空隙。\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2019/png/227019/1550717340837-67f1b613-3d25-4e52-b298-67d511616d6a.png?x-oss-process=image%2Fresize%2Cw_391\",alt:\"\"}})]),v._v(\" \"),e(\"h3\",{attrs:{id:\"快速列表-quicklist-了解吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速列表-quicklist-了解吗\"}},[v._v(\"#\")]),v._v(\" 快速列表 quicklist 了解吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 早期版本存储 list 列表数据结构使用的是压缩列表 ziplist 和普通的双向链表 linkedlist，也就是说当元素少时使用 ziplist，当元素多时用 linkedlist。但考虑到链表的附加空间相对较高，\"),e(\"code\",[v._v(\"prev\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"next\")]),v._v(\" 指针就要占去 \"),e(\"code\",[v._v(\"16\")]),v._v(\" 个字节（64 位操作系统占用 \"),e(\"code\",[v._v(\"8\")]),v._v(\" 个字节），另外每个节点的内存都是单独分配，会加剧内存的碎片化，影响内存管理效率。\")]),v._v(\" \"),e(\"p\",[v._v(\"后来 Redis 新版本（3.2）对列表数据结构进行了改造，使用 \"),e(\"code\",[v._v(\"quicklist\")]),v._v(\" 代替了 \"),e(\"code\",[v._v(\"ziplist\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"linkedlist\")]),v._v(\"。\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"同上..建议阅读一下以下的文章：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"Redis列表list 底层原理 - https://zhuanlan.zhihu.com/p/102422311\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"除了5种基本数据类型-还知道其他数据结构不\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#除了5种基本数据类型-还知道其他数据结构不\"}},[v._v(\"#\")]),v._v(\" 除了5种基本数据类型，还知道其他数据结构不\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"bitmaps-位图\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bitmaps-位图\"}},[v._v(\"#\")]),v._v(\" Bitmaps（位图）\")]),v._v(\" \"),e(\"p\",[v._v(\"位图不是实际的数据类型，而是在 String 类型上定义的一组面向位的操作。可以看作是 byte 数组。我们可以使用普通的 get/set 直接获取和设置整个位图的内容，也可以使用位图操作 getbit/setbit 等将 byte 数组看成「位数组」来处理。\")]),v._v(\" \"),e(\"p\",[v._v(\"一般用于：各种实时分析；存储与对象 ID 相关的布尔信息\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"hyperloglog\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hyperloglog\"}},[v._v(\"#\")]),v._v(\" HyperLogLog\")]),v._v(\" \"),e(\"p\",[v._v(\"HyperLogLog是一种概率数据结构，用于对唯一事物进行计数（从技术上讲，这是指估计集合的基数）\")]),v._v(\" \"),e(\"p\",[v._v(\"https://www.wmyskxz.com/2020/03/02/reids-4-shen-qi-de-hyperloglog-jie-jue-tong-ji-wen-ti/\")]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"三、redis持久化问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、redis持久化问题\"}},[v._v(\"#\")]),v._v(\" 三、Redis持久化问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"你对redis的持久化机制了解吗-能讲一下吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#你对redis的持久化机制了解吗-能讲一下吗\"}},[v._v(\"#\")]),v._v(\" 你对redis的持久化机制了解吗？能讲一下吗？\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"或者不会这么直白的问，而是问 Redis 是如何实现数据不丢失的?\")])]),v._v(\" \"),e(\"p\",[v._v(\"Redis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制，它会将内存中的数据库状态 \"),e(\"strong\",[v._v(\"保存到磁盘\")]),v._v(\" 中。\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"回答思路：先说明 Redis 有几种持久化的方式，然后分析 AOF 和 RDB 的原理以及存在的问题，最后分析一下 Redis 4.0 版本之后的持久化机制。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"解释一下持久化发生了什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#解释一下持久化发生了什么\"}},[v._v(\"#\")]),v._v(\" 解释一下持久化发生了什么\")]),v._v(\" \"),e(\"p\",[v._v(\"我们来稍微考虑一下 \"),e(\"strong\",[v._v(\"Redis\")]),v._v(\" 作为一个 \"),e(\"strong\",[v._v(\"“内存数据库”\")]),v._v(\" 要做的关于持久化的事情。通常来说，从客户端发起请求开始，到服务器真实地写入磁盘，需要发生如下几件事情：\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-5c209bc08da11abb.png\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"详细版\")]),v._v(\" 的文字描述大概就是下面这样：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"客户端向数据库 \"),e(\"strong\",[v._v(\"发送写命令\")]),v._v(\" \"),e(\"em\",[v._v(\"(数据在客户端的内存中)\")])]),v._v(\" \"),e(\"li\",[v._v(\"数据库 \"),e(\"strong\",[v._v(\"接收\")]),v._v(\" 到客户端的 \"),e(\"strong\",[v._v(\"写请求\")]),v._v(\" \"),e(\"em\",[v._v(\"(数据在服务器的内存中)\")])]),v._v(\" \"),e(\"li\",[v._v(\"数据库 \"),e(\"strong\",[v._v(\"调用系统 API\")]),v._v(\" 将数据写入磁盘 \"),e(\"em\",[v._v(\"(数据在内核缓冲区中)\")])]),v._v(\" \"),e(\"li\",[v._v(\"操作系统将 \"),e(\"strong\",[v._v(\"写缓冲区\")]),v._v(\" 传输到 \"),e(\"strong\",[v._v(\"磁盘控制器\")]),v._v(\" \"),e(\"em\",[v._v(\"(数据在磁盘缓存中)\")])]),v._v(\" \"),e(\"li\",[v._v(\"操作系统的磁盘控制器将数据 \"),e(\"strong\",[v._v(\"写入实际的物理媒介\")]),v._v(\" 中 \"),e(\"em\",[v._v(\"(数据在磁盘中)\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-持久化的方式有哪写\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-持久化的方式有哪写\"}},[v._v(\"#\")]),v._v(\" Redis 持久化的方式有哪写\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis有两种持久化的方式：快照（RDB文件）和追加式文件（AOF文件)\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"rdb-redis-database\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdb-redis-database\"}},[v._v(\"#\")]),v._v(\" RDB（Redis DataBase）\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"在指定的时间间隔内将内存中的数据集快照写入磁盘\")]),v._v(\"，也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"What ? Redis 不是单进程的吗?\")])]),v._v(\" \"),e(\"p\",[v._v(\"Redis 使用操作系统的多进程 COW(Copy On Write) 机制来实现快照持久化， fork 是类Unix操作系统上\"),e(\"strong\",[v._v(\"创建进程\")]),v._v(\"的主要方法。COW(Copy On Write)是计算机编程中使用的一种优化策略。\")]),v._v(\" \"),e(\"p\",[v._v(\"fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。 子进程读取数据，然后序列化写到磁盘中。\")]),v._v(\" \"),e(\"p\",[v._v(\"rdb 默认保存的是 \"),e(\"strong\",[v._v(\"dump.rdb\")]),v._v(\" 文件\")]),v._v(\" \"),e(\"p\",[v._v(\"你可以对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次数据集。\")]),v._v(\" \"),e(\"p\",[v._v(\"你也可以通过调用 \"),e(\"a\",{attrs:{href:\"http://redisdoc.com/server/save.html#save\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"SAVE\"),e(\"OutboundLink\")],1),v._v(\" 或者 \"),e(\"a\",{attrs:{href:\"http://redisdoc.com/server/bgsave.html#bgsave\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"BGSAVE\"),e(\"OutboundLink\")],1),v._v(\" ， 手动让 Redis 进行数据集保存操作。\")]),v._v(\" \"),e(\"p\",[v._v(\"比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[v._v(\"save 60 1000\\n\")])])]),e(\"h3\",{attrs:{id:\"rdb-做快照时会阻塞线程吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdb-做快照时会阻塞线程吗\"}},[v._v(\"#\")]),v._v(\" RDB 做快照时会阻塞线程吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"因为 Redis 的单线程模型决定了它所有操作都要尽量避免阻塞主线程，所以对于 RDB 快照也不例外，这关系到是否会降低 Redis 的性能。\")]),v._v(\" \"),e(\"p\",[v._v(\"为了解决这个问题，Redis 提供了两个命令来生成 RDB 快照文件，分别是 save 和 bgsave。save 命令在主线程中执行，会导致阻塞。而 bgsave 命令则会创建一个子进程，用于写入 RDB 文件的操作，避免了对主线程的阻塞，这也是 Redis RDB 的默认配置。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"rdb-做快照的时候数据能修改吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdb-做快照的时候数据能修改吗\"}},[v._v(\"#\")]),v._v(\" RDB 做快照的时候数据能修改吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"它利用了 bgsave 的子进程，具体操作如下：\")]),v._v(\" \"),e(\"p\",[v._v(\"如果主线程执行读操作，则主线程和 bgsave 子进程互相不影响；\")]),v._v(\" \"),e(\"p\",[v._v(\"如果主线程执行写操作，则被修改的数据会复制一份副本，然后 bgsave 子进程会把该副本数据写入 RDB 文件，在这个过程中，主线程仍然可以直接修改原来的数据。\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/008i3skNly1gv8w2ru8pjj60my08njrv02.jpg\",alt:\"\"}})]),v._v(\" \"),e(\"h4\",{attrs:{id:\"aof-append-only-file\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aof-append-only-file\"}},[v._v(\"#\")]),v._v(\" AOF（Append Only File）\")]),v._v(\" \"),e(\"p\",[v._v(\"以日志的形式来记录每个写操作，将 Redis 执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，也就是「重放」。换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。\")]),v._v(\" \"),e(\"p\",[v._v(\"AOF 默认保存的是 **appendonly.aof ** 文件\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"aof-日志是如何实现的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aof-日志是如何实现的\"}},[v._v(\"#\")]),v._v(\" AOF 日志是如何实现的？\")]),v._v(\" \"),e(\"p\",[v._v(\"通常情况下，关系型数据库（如 MySQL）的日志都是“写前日志”（Write Ahead Log, WAL），也就是说，在实际写数据之前，先把修改的数据记到日志文件中，以便当出现故障时进行恢复，比如 MySQL 的 redo log（重做日志），记录的就是修改后的数据。\")]),v._v(\" \"),e(\"p\",[v._v(\"而 AOF 里记录的是 Redis 收到的每一条命令，这些命令是以文本形式保存的，不同的是，Redis 的 AOF 日志的记录顺序与传统关系型数据库正好相反，它是写后日志，“写后”是指 Redis 要先执行命令，把数据写入内存，然后再记录日志到文件。\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/008i3skNly1gv8w2zoad0j60cj063wem02.jpg\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[v._v(\"那么面试的考察点来了：Reids 为什么先执行命令，在把数据写入日志呢？为了方便你理解，我整理了关键的记忆点：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[v._v(\"因为 ，Redis 在写入日志之前，不对命令进行语法检查；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"所以，只记录执行成功的命令，避免了出现记录错误命令的情况；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"并且，在命令执行完之后再记录，不会阻塞当前的写操作。\")])])]),v._v(\" \"),e(\"p\",[v._v(\"当然，这样做也会带来风险（这一点你也要在面试中给出解释）。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[v._v(\"数据可能会丢失： 如果 Redis 刚执行完命令，此时发生故障宕机，会导致这条命令存在丢失的风险。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"可能阻塞其他操作： 虽然 AOF 是写后日志，避免阻塞当前命令的执行，但因为 AOF 日志也是在主线程中执行，所以当 Redis 把日志文件写入磁盘的时候，还是会阻塞后续的操作无法执行。\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"rdb-和-aof-各自有什么优缺点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdb-和-aof-各自有什么优缺点\"}},[v._v(\"#\")]),v._v(\" RDB 和 AOF 各自有什么优缺点？\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"RDB | 优点\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"只有一个文件 \"),e(\"code\",[v._v(\"dump.rdb\")]),v._v(\"，\"),e(\"strong\",[v._v(\"方便持久化\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"容灾性好\")]),v._v(\"，一个文件可以保存到安全的磁盘。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"性能最大化\")]),v._v(\"，\"),e(\"code\",[v._v(\"fork\")]),v._v(\" 子进程来完成写操作，让主进程继续处理命令，所以使 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 Redis 的高性能\")]),v._v(\" \"),e(\"li\",[v._v(\"相对于数据集大时，比 AOF 的 \"),e(\"strong\",[v._v(\"启动效率\")]),v._v(\" 更高。\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"RDB | 缺点\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[v._v(\"数据安全性低\")]),v._v(\"。RDB 是间隔一段时间进行持久化，如果持久化之间 Redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候；\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"AOF | 优点\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[v._v(\"数据安全\")]),v._v(\"，aof 持久化可以配置 \"),e(\"code\",[v._v(\"appendfsync\")]),v._v(\" 属性，有 \"),e(\"code\",[v._v(\"always\")]),v._v(\"，每进行一次命令操作就记录到 aof 文件中一次。\")]),v._v(\" \"),e(\"li\",[v._v(\"通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。\")]),v._v(\" \"),e(\"li\",[v._v(\"AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"AOF | 缺点\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"AOF 文件比 RDB \"),e(\"strong\",[v._v(\"文件大\")]),v._v(\"，且 \"),e(\"strong\",[v._v(\"恢复速度慢\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"数据集大\")]),v._v(\" 的时候，比 rdb \"),e(\"strong\",[v._v(\"启动效率低\")]),v._v(\"。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"aof-如果文件越来愈大-怎么办\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aof-如果文件越来愈大-怎么办\"}},[v._v(\"#\")]),v._v(\" aof 如果文件越来愈大 怎么办？\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"rewrite（AOF 重写）\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"是什么：AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令\"),e(\"code\",[v._v(\"bgrewriteaof\")]),v._v(\"，这个操作相当于对AOF文件“瘦身”。\")]),v._v(\" \"),e(\"li\",[v._v(\"重写原理：AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的 Set 语句。重写 aof 文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的 aof 文件，这点和快照有点类似\")]),v._v(\" \"),e(\"li\",[v._v(\"触发机制：Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于64M 时触发\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"两种持久化方式如何选择\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两种持久化方式如何选择\"}},[v._v(\"#\")]),v._v(\" 两种持久化方式如何选择？\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储\")]),v._v(\" \"),e(\"li\",[v._v(\"AOF 持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以 redis 协议追加保存每次写的操作到文件末尾。Redis还能对AOF文件进行后台重写（\"),e(\"strong\",[v._v(\"bgrewriteaof\")]),v._v(\"）,使得 AOF 文件的体积不至于过大\")]),v._v(\" \"),e(\"li\",[v._v(\"只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式。\")]),v._v(\" \"),e(\"li\",[v._v(\"同时开启两种持久化方式\\n\"),e(\"ul\",[e(\"li\",[v._v(\"在这种情况下,当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据,因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。\")]),v._v(\" \"),e(\"li\",[v._v(\"RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用AOF 呢？建议不要，因为 RDB 更适合用于备份数据库(AOF 在不断变化不好备份)，快速重启，而且不会有 AOF 可能潜在的bug，留着作为一个万一的手段。\")])])])]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"四、redis事务问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、redis事务问题\"}},[v._v(\"#\")]),v._v(\" 四、Redis事务问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis事务的概念\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis事务的概念\"}},[v._v(\"#\")]),v._v(\" Redis事务的概念？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。\")]),v._v(\" \"),e(\"p\",[v._v(\"总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。\")]),v._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"http://redisdoc.com/transaction/multi.html#multi\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"MULTI\"),e(\"OutboundLink\")],1),v._v(\" 命令用于开启一个事务，它总是返回 OK 。\")]),v._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"http://redisdoc.com/transaction/multi.html#multi\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"MULTI\"),e(\"OutboundLink\")],1),v._v(\" 执行之后， 客户端可以继续向服务器发送任意多条命令， 这些命令不会立即被执行， 而是被放到一个队列中， 当 \"),e(\"a\",{attrs:{href:\"http://redisdoc.com/transaction/exec.html#exec\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"EXEC\"),e(\"OutboundLink\")],1),v._v(\" 命令被调用时， 所有队列中的命令才会被执行。\")]),v._v(\" \"),e(\"p\",[v._v(\"另一方面， 通过调用 \"),e(\"a\",{attrs:{href:\"http://redisdoc.com/transaction/discard.html#discard\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"DISCARD\"),e(\"OutboundLink\")],1),v._v(\" ， 客户端可以清空事务队列， 并放弃执行事务。\")]),v._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"http://redisdoc.com/transaction/watch.html#watch\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"WATCH\"),e(\"OutboundLink\")],1),v._v(\" 使得 \"),e(\"a\",{attrs:{href:\"http://redisdoc.com/transaction/exec.html#exec\",target:\"_blank\",rel:\"noopener noreferrer\"}},[v._v(\"EXEC\"),e(\"OutboundLink\")],1),v._v(\" 命令需要有条件地执行： 事务只能在所有被监视键都没有被修改的前提下执行， 如果这个前提不能满足的话，事务就不会被执行。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis事务的三个阶段、三特性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis事务的三个阶段、三特性\"}},[v._v(\"#\")]),v._v(\" Redis事务的三个阶段、三特性\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"三阶段\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"开启：以MULTI开始一个事务\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"执行：由EXEC命令触发事务\")])])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"三特性\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[e(\"strong\",[v._v(\"没有隔离级别的概念\")]),v._v(\"：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis事务支持隔离性吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis事务支持隔离性吗\"}},[v._v(\"#\")]),v._v(\" Redis事务支持隔离性吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，\"),e(\"strong\",[v._v(\"Redis 的事务是总是带有隔离性的\")]),v._v(\"。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis事务保证原子性吗-支持回滚吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis事务保证原子性吗-支持回滚吗\"}},[v._v(\"#\")]),v._v(\" Redis事务保证原子性吗，支持回滚吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis中，单条命令是原子性执行的，但\"),e(\"strong\",[v._v(\"事务不保证原子性，且没有回滚\")]),v._v(\"。事务中任意命令执行失败，其余的命令仍会被执行。\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[v._v(\"如果在一个事务中的命令出现错误，那么所有的命令都不会执行\")]),v._v(\"；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"如果在一个事务中出现运行错误，那么正确的命令会被执行\")]),v._v(\"。\")])]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"五、redis-集群问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、redis-集群问题\"}},[v._v(\"#\")]),v._v(\" 五、Redis 集群问题\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"redis单节点存在单点故障问题，为了解决单点问题，一般都需要对redis配置从节点，然后使用哨兵来监听主节点的存活状态，如果主节点挂掉，从节点能继续提供缓存功能\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"主从同步了解吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主从同步了解吗\"}},[v._v(\"#\")]),v._v(\" 主从同步了解吗？\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-4956a718c124a81f.png\",alt:\"img\"}})]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"主从复制\")]),v._v(\"，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 \"),e(\"strong\",[v._v(\"主节点(master)\")]),v._v(\"，后者称为 \"),e(\"strong\",[v._v(\"从节点(slave)\")]),v._v(\"。且数据的复制是 \"),e(\"strong\",[v._v(\"单向\")]),v._v(\" 的，只能由主节点到从节点。Redis 主从复制支持 \"),e(\"strong\",[v._v(\"主从同步\")]),v._v(\" 和 \"),e(\"strong\",[v._v(\"从从同步\")]),v._v(\" 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"主从复制主要的作用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主从复制主要的作用\"}},[v._v(\"#\")]),v._v(\" 主从复制主要的作用\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"数据冗余：\")]),v._v(\" 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"故障恢复：\")]),v._v(\" 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 \"),e(\"em\",[v._v(\"(实际上是一种服务的冗余)\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"负载均衡：\")]),v._v(\" 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 \"),e(\"em\",[v._v(\"（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）\")]),v._v(\"，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"高可用基石：\")]),v._v(\" 除了上述作用以外，主从复制还是哨兵和集群能够实施的 \"),e(\"strong\",[v._v(\"基础\")]),v._v(\"，因此说主从复制是 Redis 高可用的基础。\")])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"实现原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现原理\"}},[v._v(\"#\")]),v._v(\" 实现原理\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-c97a6bcc0936cd17.png\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[v._v(\"为了节省篇幅，我把主要的步骤都 \"),e(\"strong\",[v._v(\"浓缩\")]),v._v(\" 在了上图中，其实也可以 \"),e(\"strong\",[v._v(\"简化成三个阶段：准备阶段-数据同步阶段-命令传播阶段\")]),v._v(\"。\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"redis2.8 之前使用\"),e(\"code\",[v._v(\"sync[runId][offset]\")]),v._v(\"同步命令，redis2.8 之后使用\"),e(\"code\",[v._v(\"psync[runId][offset]\")]),v._v(\"命令。两者不同在于，sync 命令仅支持全量复制过程，psync 支持全量和部分复制\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"那主从复制会存在哪些问题呢\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#那主从复制会存在哪些问题呢\"}},[v._v(\"#\")]),v._v(\" 那主从复制会存在哪些问题呢？\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"一旦主节点宕机，从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预\")]),v._v(\" \"),e(\"li\",[v._v(\"主节点的写能力受到单机的限制\")]),v._v(\" \"),e(\"li\",[v._v(\"主节点的存储能力受到单机的限制\")]),v._v(\" \"),e(\"li\",[v._v(\"原生复制的弊端在早期的版本中也会比较突出，比如：redis 复制中断后，从节点会发起 psync。此时如果同步不成功，则会进行全量同步，主库执行全量备份的同时，可能会造成毫秒或秒级的卡顿\")])]),v._v(\" \"),e(\"p\",[v._v(\"那比较主流的解决方案是什么呢？哨兵\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"什么是哨兵\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是哨兵\"}},[v._v(\"#\")]),v._v(\" 什么是哨兵\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TzlTcnXg26t1Dia266foajMic89F6770xHiaYPJN48zJR2LB8A6aP3VfIgC0vVxibVlYicy2gwiaqXdSrPw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[e(\"em\",[v._v(\"上图\")]),v._v(\" 展示了一个典型的哨兵架构图，它由两部分组成，哨兵节点和数据节点：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"哨兵节点：\")]),v._v(\" 哨兵系统由一个或多个哨兵节点组成，\"),e(\"strong\",[v._v(\"哨兵节点是特殊的 Redis 节点，不存储数据\")]),v._v(\"；\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"数据节点：\")]),v._v(\" 主节点和从节点都是数据节点；\")])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"哨兵的介绍\")])]),v._v(\" \"),e(\"p\",[v._v(\"sentinel，中文名是哨兵。哨兵是 redis 集群机构中非常重要的一个组件，主要有以下功能：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"集群监控：负责监控 redis master 和 slave 进程是否正常工作。\")]),v._v(\" \"),e(\"li\",[v._v(\"消息通知：如果某个 redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。\")]),v._v(\" \"),e(\"li\",[v._v(\"故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。\")]),v._v(\" \"),e(\"li\",[v._v(\"配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。\")])]),v._v(\" \"),e(\"p\",[v._v(\"哨兵用于实现 redis 集群的高可用，本身也是分布式的，作为一个哨兵集群去运行，互相协同工作。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"哨兵的核心知识\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"哨兵至少需要 3 个实例，来保证自己的健壮性。\")]),v._v(\" \"),e(\"li\",[v._v(\"哨兵 + redis 主从的部署架构，是不保证数据零丢失的，只能保证 redis 集群的高可用性。\")]),v._v(\" \"),e(\"li\",[v._v(\"对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"那你能说下哨兵的工作原理吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#那你能说下哨兵的工作原理吗\"}},[v._v(\"#\")]),v._v(\" 那你能说下哨兵的工作原理吗？\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TzlTcnXg26t1Dia266foajMicV4uRLib3FmS9KibcSMycB36MwicA3GTygLnQTl3VkAGb8mPE47pLzcz0g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\",alt:\"\"}})]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"每个 Sentinel 节点都需要定期执行以下任务：每个 Sentinel 以每秒一次的频率，向它所知的主服务器、从服务器以及其他的 Sentinel 实例发送一个 PING 命令。\")]),v._v(\" \"),e(\"li\",[v._v(\"如果一个实例距离最后一次有效回复 PING 命令的时间超过\"),e(\"code\",[v._v(\"down-after-milliseconds\")]),v._v(\"所指定的值，那么这个实例会被 Sentinel 标记为主观下线\")]),v._v(\" \"),e(\"li\",[v._v(\"如果一个主服务器被标记为主观下线，那么正在监视这个服务器的所有 Sentinel 节点，要以每秒一次的频率确认主服务器的确进入了主观下线状态\")]),v._v(\" \"),e(\"li\",[v._v(\"如果一个主服务器被标记为主观下线，并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线\")]),v._v(\" \"),e(\"li\",[v._v(\"一般情况下，每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令，当一个主服务器被标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率，会从 10 秒一次改为每秒一次\")]),v._v(\" \"),e(\"li\",[v._v(\"Sentinel 和其他 Sentinel 协商客观下线的主节点的状态，如果处于 SDOWN 状态，则投票自动选出新的主节点，将剩余从节点指向新的主节点进行数据复制\")]),v._v(\" \"),e(\"li\",[v._v(\"当没有足够数量的 Sentinel 同意主服务器下线时，主服务器的客观下线状态就会被移除。当主服务器重新向 Sentinel 的 PING 命令返回有效回复时，主服务器的主观下线状态就会被移除\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"新的主服务器是怎样被挑选出来的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#新的主服务器是怎样被挑选出来的\"}},[v._v(\"#\")]),v._v(\" 新的主服务器是怎样被挑选出来的？\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"故障转移操作的第一步\")]),v._v(\" 要做的就是在已下线主服务器属下的所有从服务器中，挑选出一个状态良好、数据完整的从服务器，然后向这个从服务器发送 \"),e(\"code\",[v._v(\"slaveof no one\")]),v._v(\" 命令，将这个从服务器转换为主服务器。但是这个从服务器是怎么样被挑选出来的呢？\")]),v._v(\" \"),e(\"p\",[v._v(\"简单来说 Sentinel 使用以下规则来选择新的主服务器：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"在失效主服务器属下的从服务器当中， 那些被标记为主观下线、已断线、或者最后一次回复 PING 命令的时间大于五秒钟的从服务器都会被 \"),e(\"strong\",[v._v(\"淘汰\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[v._v(\"在失效主服务器属下的从服务器当中， 那些与失效主服务器连接断开的时长超过 down-after 选项指定的时长十倍的从服务器都会被 \"),e(\"strong\",[v._v(\"淘汰\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[v._v(\"在 \"),e(\"strong\",[v._v(\"经历了以上两轮淘汰之后\")]),v._v(\" 剩下来的从服务器中， 我们选出 \"),e(\"strong\",[v._v(\"复制偏移量（replication offset）最大\")]),v._v(\" 的那个 \"),e(\"strong\",[v._v(\"从服务器\")]),v._v(\" 作为新的主服务器；如果复制偏移量不可用，或者从服务器的复制偏移量相同，那么 \"),e(\"strong\",[v._v(\"带有最小运行 ID\")]),v._v(\" 的那个从服务器成为新的主服务器。\")])]),v._v(\" \"),e(\"p\",[v._v(\"Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-集群使用过吗-原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-集群使用过吗-原理\"}},[v._v(\"#\")]),v._v(\" Redis 集群使用过吗？原理？\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-516eb4a9465451a6.png\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[e(\"em\",[v._v(\"上图\")]),v._v(\" 展示了 \"),e(\"strong\",[v._v(\"Redis Cluster\")]),v._v(\" 典型的架构图，集群中的每一个 Redis 节点都 \"),e(\"strong\",[v._v(\"互相两两相连\")]),v._v(\"，客户端任意 \"),e(\"strong\",[v._v(\"直连\")]),v._v(\" 到集群中的 \"),e(\"strong\",[v._v(\"任意一台\")]),v._v(\"，就可以对其他 Redis 节点进行 \"),e(\"strong\",[v._v(\"读写\")]),v._v(\" 的操作。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"基本原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本原理\"}},[v._v(\"#\")]),v._v(\" 基本原理\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-f65c71ca6811c634.png\",alt:\"img\"}})]),v._v(\" \"),e(\"p\",[v._v(\"Redis 集群中内置了 \"),e(\"code\",[v._v(\"16384\")]),v._v(\" 个哈希槽。当客户端连接到 Redis 集群之后，会同时得到一份关于这个 \"),e(\"strong\",[v._v(\"集群的配置信息\")]),v._v(\"，当客户端具体对某一个 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 值进行操作时，会计算出它的一个 Hash 值，然后把结果对 \"),e(\"code\",[v._v(\"16384\")]),v._v(\" \"),e(\"strong\",[v._v(\"求余数\")]),v._v(\"，这样每个 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 都会对应一个编号在 \"),e(\"code\",[v._v(\"0-16383\")]),v._v(\" 之间的哈希槽，Redis 会根据节点数量 \"),e(\"strong\",[v._v(\"大致均等\")]),v._v(\" 的将哈希槽映射到不同的节点。\")]),v._v(\" \"),e(\"p\",[v._v(\"再结合集群的配置信息就能够知道这个 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 值应该存储在哪一个具体的 Redis 节点中，如果不属于自己管，那么就会使用一个特殊的 \"),e(\"code\",[v._v(\"MOVED\")]),v._v(\" 命令来进行一个跳转，告诉客户端去连接这个节点以获取数据：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[v._v(\"GET x\\n-MOVED \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"3999\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"127.0\")]),v._v(\".0.1:6381\\n\")])])]),e(\"p\",[e(\"code\",[v._v(\"MOVED\")]),v._v(\" 指令第一个参数 \"),e(\"code\",[v._v(\"3999\")]),v._v(\" 是 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 对应的槽位编号，后面是目标节点地址，\"),e(\"code\",[v._v(\"MOVED\")]),v._v(\" 命令前面有一个减号，表示这是一个错误的消息。客户端在收到 \"),e(\"code\",[v._v(\"MOVED\")]),v._v(\" 指令后，就立即纠正本地的 \"),e(\"strong\",[v._v(\"槽位映射表\")]),v._v(\"，那么下一次再访问 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 时就能够到正确的地方去获取了。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"集群的主要作用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群的主要作用\"}},[v._v(\"#\")]),v._v(\" 集群的主要作用\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[v._v(\"数据分区：\")]),v._v(\" 数据分区 \"),e(\"em\",[v._v(\"(或称数据分片)\")]),v._v(\" 是集群最核心的功能。集群将数据分散到多个节点，\"),e(\"strong\",[v._v(\"一方面\")]),v._v(\" 突破了 Redis 单机内存大小的限制，\"),e(\"strong\",[v._v(\"存储容量大大增加\")]),v._v(\"；\"),e(\"strong\",[v._v(\"另一方面\")]),v._v(\" 每个主节点都可以对外提供读服务和写服务，\"),e(\"strong\",[v._v(\"大大提高了集群的响应能力\")]),v._v(\"。Redis 单机内存大小受限问题，在介绍持久化和主从复制时都有提及，例如，如果单机内存太大，\"),e(\"code\",[v._v(\"bgsave\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"bgrewriteaof\")]),v._v(\" 的 \"),e(\"code\",[v._v(\"fork\")]),v._v(\" 操作可能导致主进程阻塞，主从环境下主机切换时可能导致从节点长时间无法提供服务，全量复制阶段主节点的复制缓冲区可能溢出……\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"高可用：\")]),v._v(\" 集群支持主从复制和主节点的 \"),e(\"strong\",[v._v(\"自动故障转移\")]),v._v(\" \"),e(\"em\",[v._v(\"（与哨兵类似）\")]),v._v(\"，当任一节点发生故障时，集群仍然可以对外提供服务。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"集群中数据如何分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群中数据如何分区\"}},[v._v(\"#\")]),v._v(\" 集群中数据如何分区？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 采用方案三。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"方案一-哈希值-节点数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案一-哈希值-节点数\"}},[v._v(\"#\")]),v._v(\" 方案一：哈希值 % 节点数\")]),v._v(\" \"),e(\"p\",[v._v(\"哈希取余分区思路非常简单：计算 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 的 hash 值，然后对节点数量进行取余，从而决定数据映射到哪个节点上。\")]),v._v(\" \"),e(\"p\",[v._v(\"不过该方案最大的问题是，\"),e(\"strong\",[v._v(\"当新增或删减节点时\")]),v._v(\"，节点数量发生变化，系统中所有的数据都需要 \"),e(\"strong\",[v._v(\"重新计算映射关系\")]),v._v(\"，引发大规模数据迁移。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"方案二-一致性哈希分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案二-一致性哈希分区\"}},[v._v(\"#\")]),v._v(\" 方案二：一致性哈希分区\")]),v._v(\" \"),e(\"p\",[v._v(\"一致性哈希算法将 \"),e(\"strong\",[v._v(\"整个哈希值空间\")]),v._v(\" 组织成一个虚拟的圆环，范围是 \"),e(\"em\",[v._v(\"[0 - 2^32 - 1]\")]),v._v(\"，对于每一个数据，根据 \"),e(\"code\",[v._v(\"key\")]),v._v(\" 计算 hash 值，确数据在环上的位置，然后从此位置沿顺时针行走，找到的第一台服务器就是其应该映射到的服务器：\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%8B%85%E5%BF%83%E6%88%91%E9%9D%A2%E8%AF%95%E8%A2%ABRedis%E9%97%AE%E5%BE%97%E8%84%B8%E9%83%BD%E7%BB%BF%E4%BA%86/7896890-40e8a2c096c8da92.png\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[v._v(\"与哈希取余分区相比，一致性哈希分区将 \"),e(\"strong\",[v._v(\"增减节点的影响限制在相邻节点\")]),v._v(\"。以上图为例，如果在 \"),e(\"code\",[v._v(\"node1\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"node2\")]),v._v(\" 之间增加 \"),e(\"code\",[v._v(\"node5\")]),v._v(\"，则只有 \"),e(\"code\",[v._v(\"node2\")]),v._v(\" 中的一部分数据会迁移到 \"),e(\"code\",[v._v(\"node5\")]),v._v(\"；如果去掉 \"),e(\"code\",[v._v(\"node2\")]),v._v(\"，则原 \"),e(\"code\",[v._v(\"node2\")]),v._v(\" 中的数据只会迁移到 \"),e(\"code\",[v._v(\"node4\")]),v._v(\" 中，只有 \"),e(\"code\",[v._v(\"node4\")]),v._v(\" 会受影响。\")]),v._v(\" \"),e(\"p\",[v._v(\"一致性哈希分区的主要问题在于，当 \"),e(\"strong\",[v._v(\"节点数量较少\")]),v._v(\" 时，增加或删减节点，\"),e(\"strong\",[v._v(\"对单个节点的影响可能很大\")]),v._v(\"，造成数据的严重不平衡。还是以上图为例，如果去掉 \"),e(\"code\",[v._v(\"node2\")]),v._v(\"，\"),e(\"code\",[v._v(\"node4\")]),v._v(\" 中的数据由总数据的 \"),e(\"code\",[v._v(\"1/4\")]),v._v(\" 左右变为 \"),e(\"code\",[v._v(\"1/2\")]),v._v(\" 左右，与其他节点相比负载过高。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"方案三-带有虚拟节点的一致性哈希分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案三-带有虚拟节点的一致性哈希分区\"}},[v._v(\"#\")]),v._v(\" 方案三：带有虚拟节点的一致性哈希分区\")]),v._v(\" \"),e(\"p\",[v._v(\"该方案在 \"),e(\"strong\",[v._v(\"一致性哈希分区的基础上\")]),v._v(\"，引入了 \"),e(\"strong\",[v._v(\"虚拟节点\")]),v._v(\" 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为 \"),e(\"strong\",[v._v(\"槽（slot）\")]),v._v(\"。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。\")]),v._v(\" \"),e(\"p\",[v._v(\"在使用了槽的一致性哈希分区中，\"),e(\"strong\",[v._v(\"槽是数据管理和迁移的基本单位\")]),v._v(\"。槽 \"),e(\"strong\",[v._v(\"解耦\")]),v._v(\" 了 \"),e(\"strong\",[v._v(\"数据和实际节点\")]),v._v(\" 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 \"),e(\"code\",[v._v(\"4\")]),v._v(\" 个实际节点，假设为其分配 \"),e(\"code\",[v._v(\"16\")]),v._v(\" 个槽(0-15)；\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"槽 0-3 位于 node1；4-7 位于 node2；以此类推….\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果此时删除 \"),e(\"code\",[v._v(\"node2\")]),v._v(\"，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 \"),e(\"code\",[v._v(\"node1\")]),v._v(\"，槽 6 分配给 \"),e(\"code\",[v._v(\"node3\")]),v._v(\"，槽 7 分配给 \"),e(\"code\",[v._v(\"node4\")]),v._v(\"；可以看出删除 \"),e(\"code\",[v._v(\"node2\")]),v._v(\" 后，数据在其他节点的分布仍然较为均衡。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"节点之间的通信机制了解吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#节点之间的通信机制了解吗\"}},[v._v(\"#\")]),v._v(\" 节点之间的通信机制了解吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"集群的建立离不开节点之间的通信，假如我们启动六个集群节点之后通过 \"),e(\"code\",[v._v(\"redis-cli\")]),v._v(\" 命令帮助我们搭建起来了集群，实际上背后每个集群之间的两两连接是通过了 \"),e(\"code\",[v._v(\"CLUSTER MEET\")]),v._v(\" 命令发送 \"),e(\"code\",[v._v(\"MEET\")]),v._v(\" 消息完成的，下面我们展开详细说说。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"两个端口\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两个端口\"}},[v._v(\"#\")]),v._v(\" 两个端口\")]),v._v(\" \"),e(\"p\",[v._v(\"在 \"),e(\"strong\",[v._v(\"哨兵系统\")]),v._v(\" 中，节点分为 \"),e(\"strong\",[v._v(\"数据节点\")]),v._v(\" 和 \"),e(\"strong\",[v._v(\"哨兵节点\")]),v._v(\"：前者存储数据，后者实现额外的控制功能。在 \"),e(\"strong\",[v._v(\"集群\")]),v._v(\" 中，没有数据节点与非数据节点之分：\"),e(\"strong\",[v._v(\"所有的节点都存储数据，也都参与集群状态的维护\")]),v._v(\"。为此，集群中的每个节点，都提供了两个 TCP 端口：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"普通端口：\")]),v._v(\" 即我们在前面指定的端口 \"),e(\"em\",[v._v(\"(7000等)\")]),v._v(\"。普通端口主要用于为客户端提供服务 \"),e(\"em\",[v._v(\"（与单机节点类似）\")]),v._v(\"；但在节点间数据迁移时也会使用。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"集群端口：\")]),v._v(\" 端口号是普通端口 + 10000 \"),e(\"em\",[v._v(\"（10000是固定值，无法改变）\")]),v._v(\"，如 \"),e(\"code\",[v._v(\"7000\")]),v._v(\" 节点的集群端口为 \"),e(\"code\",[v._v(\"17000\")]),v._v(\"。\"),e(\"strong\",[v._v(\"集群端口只用于节点之间的通信\")]),v._v(\"，如搭建集群、增减节点、故障转移等操作时节点间的通信；不要使用客户端连接集群接口。为了保证集群可以正常工作，在配置防火墙时，要同时开启普通端口和集群端口。\")])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"gossip-协议\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gossip-协议\"}},[v._v(\"#\")]),v._v(\" Gossip 协议\")]),v._v(\" \"),e(\"p\",[v._v(\"节点间通信，按照通信协议可以分为几种类型：单对单、广播、Gossip 协议等。重点是广播和 Gossip 的对比。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"广播是指向集群内所有节点发送消息。\"),e(\"strong\",[v._v(\"优点\")]),v._v(\" 是集群的收敛速度快(集群收敛是指集群内所有节点获得的集群信息是一致的)，\"),e(\"strong\",[v._v(\"缺点\")]),v._v(\" 是每条消息都要发送给所有节点，CPU、带宽等消耗较大。\")]),v._v(\" \"),e(\"li\",[v._v(\"Gossip 协议的特点是：在节点数量有限的网络中，\"),e(\"strong\",[v._v(\"每个节点都 “随机” 的与部分节点通信\")]),v._v(\" （并不是真正的随机，而是根据特定的规则选择通信的节点），经过一番杂乱无章的通信，每个节点的状态很快会达到一致。Gossip 协议的 \"),e(\"strong\",[v._v(\"优点\")]),v._v(\"有负载 (比广播) 低、去中心化、容错性高 \"),e(\"em\",[v._v(\"(因为通信有冗余)\")]),v._v(\" 等；\"),e(\"strong\",[v._v(\"缺点\")]),v._v(\" 主要是集群的收敛速度慢。\")])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"消息类型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息类型\"}},[v._v(\"#\")]),v._v(\" 消息类型\")]),v._v(\" \"),e(\"p\",[v._v(\"集群中的节点采用 \"),e(\"strong\",[v._v(\"固定频率（每秒10次）\")]),v._v(\" 的 \"),e(\"strong\",[v._v(\"定时任务\")]),v._v(\" 进行通信相关的工作：判断是否需要发送消息及消息类型、确定接收节点、发送消息等。如果集群状态发生了变化，如增减节点、槽状态变更，通过节点间的通信，所有节点会很快得知整个集群的状态，使集群收敛。\")]),v._v(\" \"),e(\"p\",[v._v(\"节点间发送的消息主要分为 \"),e(\"code\",[v._v(\"5\")]),v._v(\" 种：\"),e(\"code\",[v._v(\"meet 消息\")]),v._v(\"、\"),e(\"code\",[v._v(\"ping 消息\")]),v._v(\"、\"),e(\"code\",[v._v(\"pong 消息\")]),v._v(\"、\"),e(\"code\",[v._v(\"fail 消息\")]),v._v(\"、\"),e(\"code\",[v._v(\"publish 消息\")]),v._v(\"。不同的消息类型，通信协议、发送的频率和时机、接收节点的选择等是不同的：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[v._v(\"MEET 消息：\")]),v._v(\" 在节点握手阶段，当节点收到客户端的 \"),e(\"code\",[v._v(\"CLUSTER MEET\")]),v._v(\" 命令时，会向新加入的节点发送 \"),e(\"code\",[v._v(\"MEET\")]),v._v(\" 消息，请求新节点加入到当前集群；新节点收到 MEET 消息后会回复一个 \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"PING 消息：\")]),v._v(\" 集群里每个节点每秒钟会选择部分节点发送 \"),e(\"code\",[v._v(\"PING\")]),v._v(\" 消息，接收者收到消息后会回复一个 \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息。\"),e(\"strong\",[v._v(\"PING 消息的内容是自身节点和部分其他节点的状态信息\")]),v._v(\"，作用是彼此交换信息，以及检测节点是否在线。\"),e(\"code\",[v._v(\"PING\")]),v._v(\" 消息使用 Gossip 协议发送，接收节点的选择兼顾了收敛速度和带宽成本，\"),e(\"strong\",[v._v(\"具体规则如下\")]),v._v(\"：(1)随机找 5 个节点，在其中选择最久没有通信的 1 个节点；(2)扫描节点列表，选择最近一次收到 \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息时间大于 \"),e(\"code\",[v._v(\"cluster_node_timeout / 2\")]),v._v(\" 的所有节点，防止这些节点长时间未更新。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"PONG消息：\")]),v._v(\" \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息封装了自身状态数据。可以分为两种：\"),e(\"strong\",[v._v(\"第一种\")]),v._v(\" 是在接到 \"),e(\"code\",[v._v(\"MEET/PING\")]),v._v(\" 消息后回复的 \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息；\"),e(\"strong\",[v._v(\"第二种\")]),v._v(\" 是指节点向集群广播 \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息，这样其他节点可以获知该节点的最新信息，例如故障恢复后新的主节点会广播 \"),e(\"code\",[v._v(\"PONG\")]),v._v(\" 消息。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"FAIL 消息：\")]),v._v(\" 当一个主节点判断另一个主节点进入 \"),e(\"code\",[v._v(\"FAIL\")]),v._v(\" 状态时，会向集群广播这一 \"),e(\"code\",[v._v(\"FAIL\")]),v._v(\" 消息；接收节点会将这一 \"),e(\"code\",[v._v(\"FAIL\")]),v._v(\" 消息保存起来，便于后续的判断。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"PUBLISH 消息：\")]),v._v(\" 节点收到 \"),e(\"code\",[v._v(\"PUBLISH\")]),v._v(\" 命令后，会先执行该命令，然后向集群广播这一消息，接收节点也会执行该 \"),e(\"code\",[v._v(\"PUBLISH\")]),v._v(\" 命令。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"集群数据如何存储的有了解吗\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群数据如何存储的有了解吗\"}},[v._v(\"#\")]),v._v(\" 集群数据如何存储的有了解吗？\")]),v._v(\" \"),e(\"p\",[v._v(\"节点需要专门的数据结构来存储集群的状态。所谓集群的状态，是一个比较大的概念，包括：集群是否处于上线状态、集群中有哪些节点、节点是否可达、节点的主从状态、槽的分布……\")]),v._v(\" \"),e(\"p\",[v._v(\"节点为了存储集群状态而提供的数据结构中，最关键的是 \"),e(\"code\",[v._v(\"clusterNode\")]),v._v(\" 和 \"),e(\"code\",[v._v(\"clusterState\")]),v._v(\" 结构：前者记录了一个节点的状态，后者记录了集群作为一个整体的状态。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"clusternode-结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clusternode-结构\"}},[v._v(\"#\")]),v._v(\" clusterNode 结构\")]),v._v(\" \"),e(\"p\",[e(\"code\",[v._v(\"clusterNode\")]),v._v(\" 结构保存了 \"),e(\"strong\",[v._v(\"一个节点的当前状态\")]),v._v(\"，包括创建时间、节点 id、ip 和端口号等。每个节点都会用一个 \"),e(\"code\",[v._v(\"clusterNode\")]),v._v(\" 结构记录自己的状态，并为集群内所有其他节点都创建一个 \"),e(\"code\",[v._v(\"clusterNode\")]),v._v(\" 结构来记录节点状态。\")]),v._v(\" \"),e(\"p\",[v._v(\"下面列举了 \"),e(\"code\",[v._v(\"clusterNode\")]),v._v(\" 的部分字段，并说明了字段的含义和作用：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-c extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"typedef\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"struct\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[v._v(\"clusterNode\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"{\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//节点创建时间\")]),v._v(\"\\n    mstime_t ctime\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//节点id\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"char\")]),v._v(\" name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),v._v(\"REDIS_CLUSTER_NAMELEN\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//节点的ip和端口号\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"char\")]),v._v(\" ip\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),v._v(\"REDIS_IP_STR_LEN\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"int\")]),v._v(\" port\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//节点标识：整型，每个bit都代表了不同状态，如节点的主从状态、是否在线、是否在握手等\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"int\")]),v._v(\" flags\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//配置纪元：故障转移时起作用，类似于哨兵的配置纪元\")]),v._v(\"\\n    uint64_t configEpoch\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//槽在该节点中的分布：占用16384/8个字节，16384个比特；每个比特对应一个槽：比特值为1，则该比特对应的槽在节点中；比特值为0，则该比特对应的槽不在节点中\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"unsigned\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"char\")]),v._v(\" slots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"16384\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"8\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//节点中槽的数量\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"int\")]),v._v(\" numslots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    …………\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"}\")]),v._v(\" clusterNode\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\")])])]),e(\"p\",[v._v(\"除了上述字段，\"),e(\"code\",[v._v(\"clusterNode\")]),v._v(\" 还包含节点连接、主从复制、故障发现和转移需要的信息等。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"clusterstate-结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clusterstate-结构\"}},[v._v(\"#\")]),v._v(\" clusterState 结构\")]),v._v(\" \"),e(\"p\",[e(\"code\",[v._v(\"clusterState\")]),v._v(\" 结构保存了在当前节点视角下，集群所处的状态。主要字段包括：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-c extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"typedef\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"struct\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[v._v(\"clusterState\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"{\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//自身节点\")]),v._v(\"\\n    clusterNode \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"*\")]),v._v(\"myself\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//配置纪元\")]),v._v(\"\\n    uint64_t currentEpoch\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//集群状态：在线还是下线\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"int\")]),v._v(\" state\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//集群中至少包含一个槽的节点数量\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"int\")]),v._v(\" size\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//哈希表，节点名称->clusterNode节点指针\")]),v._v(\"\\n    dict \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"*\")]),v._v(\"nodes\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[v._v(\"//槽分布信息：数组的每个元素都是一个指向clusterNode结构的指针；如果槽还没有分配给任何节点，则为NULL\")]),v._v(\"\\n    clusterNode \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"*\")]),v._v(\"slots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"16384\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n    …………\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"}\")]),v._v(\" clusterState\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\")])])]),e(\"p\",[v._v(\"除此之外，\"),e(\"code\",[v._v(\"clusterState\")]),v._v(\" 还包括故障转移、槽迁移等需要的信息。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis集群最大节点个数是多少\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis集群最大节点个数是多少\"}},[v._v(\"#\")]),v._v(\" Redis集群最大节点个数是多少？\")]),v._v(\" \"),e(\"p\",[v._v(\"16384\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis集群会有写操作丢失吗-为什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis集群会有写操作丢失吗-为什么\"}},[v._v(\"#\")]),v._v(\" Redis集群会有写操作丢失吗？为什么？\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis集群之间是如何复制的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis集群之间是如何复制的\"}},[v._v(\"#\")]),v._v(\" Redis集群之间是如何复制的？\")]),v._v(\" \"),e(\"p\",[v._v(\"异步复制\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis是单线程的-如何提高多核cpu的利用率\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis是单线程的-如何提高多核cpu的利用率\"}},[v._v(\"#\")]),v._v(\" Redis是单线程的，如何提高多核CPU的利用率？\")]),v._v(\" \"),e(\"p\",[v._v(\"可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"为什么要做redis分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要做redis分区\"}},[v._v(\"#\")]),v._v(\" 为什么要做Redis分区？\")]),v._v(\" \"),e(\"p\",[v._v(\"分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。如果没有分区，你最多只能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升，Redis的网络带宽也会随着计算机和网卡的增加而成倍增长。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"有哪些redis分区实现方案\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#有哪些redis分区实现方案\"}},[v._v(\"#\")]),v._v(\" 有哪些Redis分区实现方案？\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大多数客户端已经实现了客户端分区。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis分区有什么缺点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis分区有什么缺点\"}},[v._v(\"#\")]),v._v(\" Redis分区有什么缺点？\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"同时操作多个key,则不能使用Redis事务.\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收集RDB / AOF文件。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。然而，有一种预分片的技术也可以较好的解决这个问题。\")])])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-的高可用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-的高可用\"}},[v._v(\"#\")]),v._v(\" Redis 的高可用\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis的高可用，主要通过主从复制机制以及Sentinel集群来实现。\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"主从复制 分为两个阶段，首先，当从服务器发起SYNC命令后，主服务器会生成最新的RDB文件发送给从服务器，并使用一个缓冲区来记录从此刻开始主服务器执行的所有写命令；待RDB文件传输完之后，再将该缓冲区的数据再发送给从服务器，这样就完成了复制。旧的Redis版本有个缺陷是，如果在第二个阶段发生失败，需要从第一个阶段重新开始同步，而这个阶段的操作会消耗大量的CPU、内存和磁盘I/O以及网络带宽资源，太过耗费资源。所以从2.8版本开始，实现了部分重同步，通过主从服务器各维护一个复制偏移量来实现。\")]),v._v(\" \"),e(\"li\",[v._v(\"Sentinel 由一个或多个Sentinel实例组成的哨兵系统，可以监视任意多个主从服务器，并完成Failover的操作。Sentinal其实是一个运行在特殊模式下的Redis服务器，运行期间，会与各服务器建立网络连接，以检测服务器的状态；同时会与其它Sentinel服务器创建连接，完成信息交换，比如发现某个主服务器心跳异常时，会互相询问心跳结果，当超过一定数量时即可判定为客观下线；一旦主服务器被判定为客观下线状态，那么Sentinel集群会通过raft协议选举，选出一个Leader来执行Failover。\")]),v._v(\" \"),e(\"li\",[v._v(\"Failover 一般来说，会先选出优先级最高的从服务器，然后再从中选出复制偏移量最大的实例，作为新的主服务器；最后将其它从和旧的主都切换为新主的从。\")])]),v._v(\" \"),e(\"p\",[v._v(\"当从服务器有2个或者多个时，Redis的主从架构可以有两种形式。一种是，所有的从服务器直接挂在主服务器上，这种模式的优点是，所有从服务器复制的延迟相对较低，而缺点在于加大了主服务器的复制压力；另一种形式，是采用级联的方式，S1从M复制，S2从S1复制，以此类推，这种模式的优点是，将主服务器的复制压力分摊到多个服务器上，而缺点在于越处于级联下游的从实例，复制延迟就越大。\")]),v._v(\" \"),e(\"p\",[v._v(\"从主从复制模式可以看出，Redis的数据只能保证最终一致，不能保证强一致性。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis的扩展性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis的扩展性\"}},[v._v(\"#\")]),v._v(\" Redis的扩展性\")]),v._v(\" \"),e(\"p\",[v._v(\"读扩展，基于主从架构，可以很好的平行扩展读的能力。写扩展，主要受限于主服务器的硬件资源的限制，一是单个实例内存容量受限，二是一个实例只使用到CPU一个核。下面讨论基于多套主从架构Redis实例的集群实现，目前主要有以下几种方案：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"客户端分片 实现方案，业务进程通过对key进行hash来分片，用Sentinel做failover。优点：运维简单，每个实例独立部署；可使用lua脚本，业务进程执行的key均hash到同一个分片即可；缺点：一旦重新分片，由于数据无法自动迁移，部分数据需要回源；\")]),v._v(\" \"),e(\"li\",[v._v(\"Redis集群 是官方提供的分布式数据库方案，通过分片实现数据共享，并提供复制和failover。按照16384个槽位进行分片，且实例之间共享分片视图。优点：当发生重新分片时，数据可以自动迁移；缺点：客户端需要升级到支持集群协议的版本；客户端需要感知分片实例，最坏的情况，每个key需要一次重定向；不支持lua脚本；不支持pipeline；\")]),v._v(\" \"),e(\"li\",[v._v(\"Codis 是由豌豆荚团队开源的一款分布式组件，它将分布式的逻辑从Redis集群剥离出来，交由几个组件来完成，与数据的读写解耦。Codis proxy负责分片和聚合，dashboard作为管理后台，zookeeper做配置管理，Sentinel做failover。优点：底层透明，客户端兼容性好；重新分片时，数据可自动迁移；支持pipeline；支持lua脚本，业务进程保证执行的key均hash到同一个分片即可；缺点：运维较为复杂；引入了中间层；\")])]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"六、redis-内存相关问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、redis-内存相关问题\"}},[v._v(\"#\")]),v._v(\" 六、Redis 内存相关问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-过期键的删除策略\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-过期键的删除策略\"}},[v._v(\"#\")]),v._v(\" Redis 过期键的删除策略？\")]),v._v(\" \"),e(\"p\",[v._v(\"先抛开 Redis 想一下几种可能的删除策略：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[v._v(\"定时删除\")]),v._v(\":在设置键的过期时间的同时，创建一个定时器 timer. 让定时器在键的过期时间来临时，立即执行对键的删除操作。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"惰性删除\")]),v._v(\":放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键;如果没有过期，就返回该键。\")]),v._v(\" \"),e(\"li\",[e(\"strong\",[v._v(\"定期删除\")]),v._v(\":每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。\")])]),v._v(\" \"),e(\"p\",[v._v(\"在上述的三种策略中定时删除和定期删除属于不同时间粒度的 \"),e(\"strong\",[v._v(\"主动删除\")]),v._v(\"，惰性删除属于 \"),e(\"strong\",[v._v(\"被动删除\")]),v._v(\"。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"三种策略都有各自的优缺点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三种策略都有各自的优缺点\"}},[v._v(\"#\")]),v._v(\" 三种策略都有各自的优缺点\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"定时删除对内存使用率有优势，但是对 CPU 不友好；\")]),v._v(\" \"),e(\"li\",[v._v(\"惰性删除对内存不友好，如果某些键值对一直不被使用，那么会造成一定量的内存浪费；\")]),v._v(\" \"),e(\"li\",[v._v(\"定期删除是定时删除和惰性删除的折中。\")])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"redis-中的实现\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-中的实现\"}},[v._v(\"#\")]),v._v(\" Redis 中的实现\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qYh3MMGpol6UM5kOalblE7xeokCYvHxbee5q7MBRg4msbSXh0jTez2G87JI9WAfMTYOibw6WAl6DnA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\",alt:\"\"}})]),v._v(\" \"),e(\"p\",[v._v(\"Reids 采用的是 \"),e(\"strong\",[v._v(\"惰性删除和定时删除\")]),v._v(\" 的结合，一般来说可以借助最小堆来实现定时器，不过 Redis 的设计考虑到时间事件的有限种类和数量，使用了无序链表存储时间事件，这样如果在此基础上实现定时删除，就意味着 \"),e(\"code\",[v._v(\"O(N)\")]),v._v(\" 遍历获取最近需要删除的数据。\")]),v._v(\" \"),e(\"p\",[v._v(\"实现过期键惰性删除策略的核心是 \"),e(\"code\",[v._v(\"db.c/expireIfNeeded\")]),v._v(\" 函数 —— 所有命令在读取或写入数据库之前，程序都会调用 \"),e(\"code\",[v._v(\"expireIfNeeded\")]),v._v(\" 对输入键进行检查， 并将过期键删除：\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://redisbook.readthedocs.io/en/latest/_images/graphviz-efb7f7ae1a793feea33285531dfe0023f3017b90.svg\",alt:'digraph expire_check {          node [style = filled, shape = plaintext];      edge [style = bold];      // node      write_commands [label = \"SET 、\\\\n LPUSH 、\\\\n SADD 、 \\\\n 等等\", fillcolor = \"#FADCAD\"];      read_commands [label = \"GET 、\\\\n LRANGE 、\\\\n SMEMBERS 、 \\\\n 等等\", fillcolor = \"#FADCAD\"];      expire_if_needed [label = \"调用 expire_if_needed() \\\\n 删除过期键\", shape = box, fillcolor = \"#A8E270\"];      process [label = \"执行实际的命令流程\"];      // edge      write_commands -> expire_if_needed [label = \"写请求\"];      read_commands -> expire_if_needed [label = \"读请求\"];      expire_if_needed -> process;  }'}})]),v._v(\" \"),e(\"p\",[v._v(\"比如说， \"),e(\"code\",[v._v(\"GET\")]),v._v(\" 命令的执行流程可以用下图来表示：\")]),v._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://redisbook.readthedocs.io/en/latest/_images/graphviz-acca43b0dd583eb92a1ce7193dc6b9bb14e9c0f9.svg\",alt:'digraph get_with_expire {      node [style = filled, shape = plaintext];      edge [style = bold];      // node        get [label = \"GET key\", fillcolor = \"#FADCAD\"];      expire_if_needed [label = \"调用\\\\n expire_if_needed() \\\\n 如果键已经过期 \\\\n 那么将它删除\", shape = diamond, fillcolor = \"#A8E270\"];      expired_and_deleted [label = \"key 不存在\\\\n 向客户端返回 NIL\"];      not_expired [label = \"向客户端返回 key 的值\"];      get -> expire_if_needed;      expire_if_needed -> expired_and_deleted [label = \"已过期\"];     expire_if_needed -> not_expired [label = \"未过期\"];  }'}})]),v._v(\" \"),e(\"p\",[e(\"code\",[v._v(\"expireIfNeeded\")]),v._v(\" 的作用是， 如果输入键已经过期的话， 那么将键、键的值、键保存在 \"),e(\"code\",[v._v(\"expires\")]),v._v(\" 字典中的过期时间都删除掉。\")]),v._v(\" \"),e(\"p\",[v._v(\"对过期键的定期删除由 \"),e(\"code\",[v._v(\"redis.c/activeExpireCycle\")]),v._v(\" 函执行： 每当 Redis 的例行处理程序 \"),e(\"code\",[v._v(\"serverCron\")]),v._v(\" 执行时， \"),e(\"code\",[v._v(\"activeExpireCycle\")]),v._v(\" 都会被调用 —— 这个函数在规定的时间限制内， 尽可能地遍历各个数据库的 \"),e(\"code\",[v._v(\"expires\")]),v._v(\" 字典， 随机地检查一部分键的过期时间， 并删除其中的过期键。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-的淘汰策略有哪些\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-的淘汰策略有哪些\"}},[v._v(\"#\")]),v._v(\" Redis 的淘汰策略有哪些？\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"redis-有六种淘汰策略\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-有六种淘汰策略\"}},[v._v(\"#\")]),v._v(\" Redis 有六种淘汰策略\")]),v._v(\" \"),e(\"p\",[v._v(\"为了保证 Redis 的安全稳定运行，设置了一个 max-memory 的阈值，那么当内存用量到达阈值，新写入的键值对无法写入，此时就需要内存淘汰机制，在 Redis 的配置中有几种淘汰策略可以选择，详细如下：\")]),v._v(\" \"),e(\"table\",[e(\"thead\",[e(\"tr\",[e(\"th\",[v._v(\"策略\")]),v._v(\" \"),e(\"th\",[v._v(\"描述\")])])]),v._v(\" \"),e(\"tbody\",[e(\"tr\",[e(\"td\",[v._v(\"volatile-lru\")]),v._v(\" \"),e(\"td\",[v._v(\"从已设置过期时间的 KV 集中优先对最近最少使用(less recently used)的数据淘汰\")])]),v._v(\" \"),e(\"tr\",[e(\"td\",[v._v(\"volitile-ttl\")]),v._v(\" \"),e(\"td\",[v._v(\"从已设置过期时间的 KV 集中优先对剩余时间短(time to live)的数据淘汰\")])]),v._v(\" \"),e(\"tr\",[e(\"td\",[v._v(\"volitile-random\")]),v._v(\" \"),e(\"td\",[v._v(\"从已设置过期时间的 KV 集中随机选择数据淘汰\")])]),v._v(\" \"),e(\"tr\",[e(\"td\",[v._v(\"allkeys-lru\")]),v._v(\" \"),e(\"td\",[v._v(\"从所有 KV 集中优先对最近最少使用(less recently used)的数据淘汰\")])]),v._v(\" \"),e(\"tr\",[e(\"td\",[v._v(\"allKeys-random\")]),v._v(\" \"),e(\"td\",[v._v(\"从所有 KV 集中随机选择数据淘汰\")])]),v._v(\" \"),e(\"tr\",[e(\"td\",[v._v(\"noeviction\")]),v._v(\" \"),e(\"td\",[v._v(\"不淘汰策略，若超过最大内存，返回错误信息\")])])])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"4.0 版本后增加以下两种\")])]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰\")]),v._v(\" \"),e(\"li\",[v._v(\"allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-内存满了怎么办\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-内存满了怎么办\"}},[v._v(\"#\")]),v._v(\" Redis 内存满了怎么办\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"增加内存；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"使用内存淘汰策略（redis设置配置文件的****maxmemory****参数，可以控制其最大可用内存大小，可以通过配置 \"),e(\"em\",[e(\"strong\",[v._v(\"*maxmemory-policy*\")])]),v._v(\" 设置淘汰策略）\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"集群\")])])]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"七、redis-缓存异常问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#七、redis-缓存异常问题\"}},[v._v(\"#\")]),v._v(\" 七、Redis 缓存异常问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis常见性能问题和解决方案\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis常见性能问题和解决方案\"}},[v._v(\"#\")]),v._v(\" Redis常见性能问题和解决方案？\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。\")]),v._v(\" \"),e(\"li\",[v._v(\"如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。\")]),v._v(\" \"),e(\"li\",[v._v(\"为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。\")]),v._v(\" \"),e(\"li\",[v._v(\"尽量避免在压力较大的主库上增加从库。\")]),v._v(\" \"),e(\"li\",[v._v(\"Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。\")]),v._v(\" \"),e(\"li\",[v._v(\"为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关系为：Master<–Slave1<–Slave2<–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"如何保证缓存与数据库双写时的数据一致性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何保证缓存与数据库双写时的数据一致性\"}},[v._v(\"#\")]),v._v(\" 如何保证缓存与数据库双写时的数据一致性？\")]),v._v(\" \"),e(\"p\",[v._v(\"你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如何解决一致性问题？\")]),v._v(\" \"),e(\"p\",[v._v(\"一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致的情况。\")]),v._v(\" \"),e(\"p\",[v._v(\"串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。\")]),v._v(\" \"),e(\"p\",[v._v(\"操作缓存的时候我们都是采取\"),e(\"strong\",[v._v(\"删除缓存\")]),v._v(\"策略的，原因如下：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"高并发环境下，无论是先操作数据库还是后操作数据库而言，如果加上更新缓存，那就\"),e(\"strong\",[v._v(\"更加容易\")]),v._v(\"导致数据库与缓存数据不一致问题。(删除缓存\"),e(\"strong\",[v._v(\"直接和简单\")]),v._v(\"很多)\")]),v._v(\" \"),e(\"li\",[v._v(\"如果每次更新了数据库，都要更新缓存【这里指的是频繁更新的场景，这会耗费一定的性能】，倒不如直接删除掉。等再次读取时，缓存里没有，那我到数据库找，在数据库找到再写到缓存里边(体现\"),e(\"strong\",[v._v(\"懒加载\")]),v._v(\")\")])]),v._v(\" \"),e(\"p\",[v._v(\"这里就又有个问题：是先更新数据库，再删除缓存，还是先删除缓存，再更新数据库呢\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"先更新数据库-再删除缓存\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#先更新数据库-再删除缓存\"}},[v._v(\"#\")]),v._v(\" 先更新数据库，再删除缓存\")]),v._v(\" \"),e(\"p\",[v._v(\"正常的情况是这样的：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"先操作数据库，成功；\")]),v._v(\" \"),e(\"li\",[v._v(\"再删除缓存，也成功；\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果原子性被破坏了：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"第一步成功(操作数据库)，第二步失败(删除缓存)，会导致\"),e(\"strong\",[v._v(\"数据库里是新数据，而缓存里是旧数据\")]),v._v(\"。\")]),v._v(\" \"),e(\"li\",[v._v(\"如果第一步(操作数据库)就失败了，我们可以直接返回错误(Exception)，不会出现数据不一致。\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果在高并发的场景下，出现数据库与缓存数据不一致的\"),e(\"strong\",[v._v(\"概率特别低\")]),v._v(\"，也不是没有：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"缓存\"),e(\"strong\",[v._v(\"刚好\")]),v._v(\"失效\")]),v._v(\" \"),e(\"li\",[v._v(\"线程A查询数据库，得一个旧值\")]),v._v(\" \"),e(\"li\",[v._v(\"线程B将新值写入数据库\")]),v._v(\" \"),e(\"li\",[v._v(\"线程B删除缓存\")]),v._v(\" \"),e(\"li\",[v._v(\"线程A将查到的旧值写入缓存\")])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"先删除缓存-再更新数据库\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#先删除缓存-再更新数据库\"}},[v._v(\"#\")]),v._v(\" 先删除缓存，再更新数据库\")]),v._v(\" \"),e(\"p\",[v._v(\"正常情况是这样的：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"先删除缓存，成功；\")]),v._v(\" \"),e(\"li\",[v._v(\"再更新数据库，也成功；\")])]),v._v(\" \"),e(\"p\",[v._v(\"如果原子性被破坏了：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"第一步成功(删除缓存)，第二步失败(更新数据库)，数据库和缓存的数据还是一致的。\")]),v._v(\" \"),e(\"li\",[v._v(\"如果第一步(删除缓存)就失败了，我们可以直接返回错误(Exception)，数据库和缓存的数据还是一致的。\")])]),v._v(\" \"),e(\"p\",[v._v(\"看起来是很美好，但是我们在并发场景下分析一下，就知道还是有问题的了：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"线程A删除了缓存\")]),v._v(\" \"),e(\"li\",[v._v(\"线程B查询，发现缓存已不存在\")]),v._v(\" \"),e(\"li\",[v._v(\"线程B去数据库查询得到旧值\")]),v._v(\" \"),e(\"li\",[v._v(\"线程B将旧值写入缓存\")]),v._v(\" \"),e(\"li\",[v._v(\"线程A将新值写入数据库\")])]),v._v(\" \"),e(\"p\",[v._v(\"所以也会导致数据库和缓存不一致的问题。但是我们一般选择这种\")]),v._v(\" \"),e(\"p\",[v._v(\"推荐阅读：\")]),v._v(\" \"),e(\"p\",[v._v(\"https://mp.weixin.qq.com/s/3Fmv7h5p2QDtLxc9n1dp5A\")]),v._v(\" \"),e(\"p\",[v._v(\"https://zhuanlan.zhihu.com/p/48334686\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"使用缓存会出现什么问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用缓存会出现什么问题\"}},[v._v(\"#\")]),v._v(\" 使用缓存会出现什么问题？\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"redis雪崩\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis雪崩\"}},[v._v(\"#\")]),v._v(\" Redis雪崩\")]),v._v(\" \"),e(\"p\",[e(\"mark\",[v._v(\"缓存雪崩是指缓存同一时间大面积的失效\")]),v._v(\"，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"解决方案\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"一般并发量不是特别多的时候，使用最多的解决方案是加锁排队(key上锁，其他线程不能访问，假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时，这是个治标不治本的方法！)。\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。\")])])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"缓存穿透\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存穿透\"}},[v._v(\"#\")]),v._v(\" 缓存穿透\")]),v._v(\" \"),e(\"p\",[e(\"mark\",[v._v(\"缓存穿透是指缓存和数据库中都没有的数据\")]),v._v(\"，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"解决方案\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"接口层增加校验，如用户鉴权校验，id做基础校验，id<=0的直接拦截；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。\")])])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"缓存击穿\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存击穿\"}},[v._v(\"#\")]),v._v(\" 缓存击穿\")]),v._v(\" \"),e(\"p\",[e(\"mark\",[v._v(\"缓存击穿是指缓存中没有但数据库中有的数据\")]),v._v(\"（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。\")]),v._v(\" \"),e(\"p\",[v._v(\"缓存击穿是指一个 Key 非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个 Key 在失效的瞬间，持续的大并发直接落到了数据库上，就在这个 Key 的点上击穿了缓存\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[e(\"strong\",[v._v(\"和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。\")])])]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"解决方案\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"热点数据永远不过期\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"加互斥锁\")])])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"缓存预热\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存预热\"}},[v._v(\"#\")]),v._v(\" 缓存预热\")]),v._v(\" \"),e(\"p\",[v._v(\"缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"解决方案\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"直接写个缓存刷新页面，上线时手工操作一下；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"数据量不大，可以在项目启动的时候自动进行加载；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"定时刷新缓存；\")])])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"缓存降级\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存降级\"}},[v._v(\"#\")]),v._v(\" 缓存降级\")]),v._v(\" \"),e(\"p\",[v._v(\"当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"缓存降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。\")])]),v._v(\" \"),e(\"p\",[v._v(\"在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。\")])])]),v._v(\" \"),e(\"p\",[v._v(\"服务降级的目的，是为了防止 Redis 服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"缓存热点key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存热点key\"}},[v._v(\"#\")]),v._v(\" 缓存热点key\")]),v._v(\" \"),e(\"p\",[v._v(\"缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"解决方案\")])]),v._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[v._v(\"对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询\")])])]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"八、分布式相关问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#八、分布式相关问题\"}},[v._v(\"#\")]),v._v(\" 八、分布式相关问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis实现分布式锁\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis实现分布式锁\"}},[v._v(\"#\")]),v._v(\" Redis实现分布式锁\")]),v._v(\" \"),e(\"p\",[v._v(\"默认指定大家用的是 Redis 2.6.12 及更高的版本，就不再去讲 \"),e(\"code\",[v._v(\"setnx\")]),v._v(\"、\"),e(\"code\",[v._v(\"expire\")]),v._v(\" 这种了，直接 \"),e(\"code\",[v._v(\"set\")]),v._v(\" 命令加锁\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-shell extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[v._v(\"set\")]),v._v(\" key value\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),v._v(\"expiration EX seconds\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"|\")]),v._v(\"PX milliseconds\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),v._v(\"NX\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"|\")]),v._v(\"XX\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),v._v(\"\\n\")])])]),e(\"blockquote\",[e(\"p\",[e(\"em\",[v._v(\"SET\")]),v._v(\" 命令的行为可以通过一系列参数来修改\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[v._v(\"EX second\")]),v._v(\" ：设置键的过期时间为 \"),e(\"code\",[v._v(\"second\")]),v._v(\" 秒。 \"),e(\"code\",[v._v(\"SET key value EX second\")]),v._v(\" 效果等同于 \"),e(\"code\",[v._v(\"SETEX key second value\")]),v._v(\" 。\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"PX millisecond\")]),v._v(\" ：设置键的过期时间为 \"),e(\"code\",[v._v(\"millisecond\")]),v._v(\" 毫秒。 \"),e(\"code\",[v._v(\"SET key value PX millisecond\")]),v._v(\" 效果等同于 \"),e(\"code\",[v._v(\"PSETEX key millisecond value\")]),v._v(\" 。\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"NX\")]),v._v(\" ：只在键不存在时，才对键进行设置操作。 \"),e(\"code\",[v._v(\"SET key value NX\")]),v._v(\" 效果等同于 \"),e(\"code\",[v._v(\"SETNX key value\")]),v._v(\" 。\")]),v._v(\" \"),e(\"li\",[e(\"code\",[v._v(\"XX\")]),v._v(\" ：只在键已经存在时，才对键进行设置操作。\")])])]),v._v(\" \"),e(\"div\",{staticClass:\"language-sh extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-sh\"}},[e(\"code\",[v._v(\"SET resource_name my_random_value NX PX \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"30000\")]),v._v(\"\\n\")])])]),e(\"p\",[v._v(\"这条指令的意思：当 key——resource_name 不存在时创建这样的 key，设值为 my_random_value，并设置过期时间 30000 毫秒。\")]),v._v(\" \"),e(\"p\",[v._v(\"别看这干了两件事，因为 Redis 是单线程的，这一条指令不会被打断，所以是原子性的操作。\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 实现分布式锁的主要步骤：\")]),v._v(\" \"),e(\"ol\",[e(\"li\",[v._v(\"指定一个 key 作为锁标记，存入 Redis 中，指定一个 \"),e(\"strong\",[v._v(\"唯一的标识\")]),v._v(\" 作为 value。\")]),v._v(\" \"),e(\"li\",[v._v(\"当 key 不存在时才能设置值，确保同一时间只有一个客户端进程获得锁，满足 \"),e(\"strong\",[v._v(\"互斥性\")]),v._v(\" 特性。\")]),v._v(\" \"),e(\"li\",[v._v(\"设置一个过期时间，防止因系统异常导致没能删除这个 key，满足 \"),e(\"strong\",[v._v(\"防死锁\")]),v._v(\" 特性。\")]),v._v(\" \"),e(\"li\",[v._v(\"当处理完业务之后需要清除这个 key 来释放锁，清除 key 时需要校验 value 值，需要满足 \"),e(\"strong\",[v._v(\"解铃还须系铃人\")]),v._v(\" 。\")])]),v._v(\" \"),e(\"p\",[v._v(\"设置一个随机值的意思是在解锁时候判断 key 的值和我们存储的随机数是不是一样，一样的话，才是自己的锁，直接 \"),e(\"code\",[v._v(\"del\")]),v._v(\" 解锁就行。\")]),v._v(\" \"),e(\"p\",[v._v(\"当然这个两个操作要保证原子性，所以 Redis 给出了一段 lua 脚本（Redis 服务器会单线程原子性执行 lua 脚本，保证 lua 脚本在处理的过程中不会被任意其它请求打断。）：\")]),v._v(\" \"),e(\"div\",{staticClass:\"language-lua extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-lua\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"if\")]),v._v(\" redis\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[v._v(\"call\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[v._v('\"get\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\"KEYS\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\")\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"==\")]),v._v(\" ARGV\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"then\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"return\")]),v._v(\" redis\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[v._v(\"call\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[v._v('\"del\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\",\")]),v._v(\"KEYS\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\")\")]),v._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"else\")]),v._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"return\")]),v._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"0\")]),v._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"end\")]),v._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"如何解决-redis-的并发竞争-key-问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何解决-redis-的并发竞争-key-问题\"}},[v._v(\"#\")]),v._v(\" 如何解决 Redis 的并发竞争 Key 问题\")]),v._v(\" \"),e(\"p\",[v._v(\"所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同！\")]),v._v(\" \"),e(\"p\",[v._v(\"推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能）\")]),v._v(\" \"),e(\"p\",[v._v(\"基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。\")]),v._v(\" \"),e(\"p\",[v._v(\"在实践中，当然是从以可靠性为主。所以首推Zookeeper。\")]),v._v(\" \"),e(\"p\",[v._v(\"参考：https://www.jianshu.com/p/8bddd381de06\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"分布式redis是前期做还是后期规模上来了再做好-为什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式redis是前期做还是后期规模上来了再做好-为什么\"}},[v._v(\"#\")]),v._v(\" 分布式Redis是前期做还是后期规模上来了再做好？为什么？\")]),v._v(\" \"),e(\"p\",[v._v(\"既然Redis是如此的轻量（单实例只使用1M内存），为防止以后的扩容，最好的办法就是一开始就启动较多实例。即便你只有一台服务器，你也可以一开始就让Redis以分布式的方式运行，使用分区，在同一台服务器上启动多个实例。\")]),v._v(\" \"),e(\"p\",[v._v(\"一开始就多设置几个Redis实例，例如32或者64个实例，对大多数用户来说这操作起来可能比较麻烦，但是从长久来看做这点牺牲是值得的。\")]),v._v(\" \"),e(\"p\",[v._v(\"这样的话，当你的数据不断增长，需要更多的Redis服务器时，你需要做的就是仅仅将Redis实例从一台服务迁移到另外一台服务器而已（而不用考虑重新分区的问题）。一旦你添加了另一台服务器，你需要将你一半的Redis实例从第一台机器迁移到第二台机器。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"什么是-redlock\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是-redlock\"}},[v._v(\"#\")]),v._v(\" 什么是 RedLock\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis 官方站提出了一种权威的基于 Redis 实现分布式锁的方式名叫 Redlock，此种方式比原先的单节点的方法更安全。它可以保证以下特性：\")]),v._v(\" \"),e(\"p\",[v._v(\"安全特性：互斥访问，即永远只有一个 client 能拿到锁\\n避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使原本锁住某资源的 client crash 了或者出现了网络分区\\n容错性：只要大部分 Redis 节点存活就可以正常提供服务\")]),v._v(\" \"),e(\"hr\"),v._v(\" \"),e(\"h2\",{attrs:{id:\"十、其他问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#十、其他问题\"}},[v._v(\"#\")]),v._v(\" 十、其他问题\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"使用redis做过异步队列吗-是如何实现的\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用redis做过异步队列吗-是如何实现的\"}},[v._v(\"#\")]),v._v(\" 使用Redis做过异步队列吗，是如何实现的\")]),v._v(\" \"),e(\"p\",[v._v(\"使用 list 类型保存数据信息，rpush 生产消息，lpop 消费消息，当 lpop 没有消息时，可以 sleep 一段时间，然后再检查有没有信息，如果不想 sleep 的话，可以使用 blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis 可以通过 pub/sub 主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis如何实现延时队列\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis如何实现延时队列\"}},[v._v(\"#\")]),v._v(\" Redis如何实现延时队列\")]),v._v(\" \"),e(\"p\",[v._v(\"使用 sortedset，使用时间戳做 score, 消息内容作为 key，调用 zadd 来生产消息，消费者使用 zrangbyscore获取n 秒之前的数据做轮询处理。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis如何做内存优化\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis如何做内存优化\"}},[v._v(\"#\")]),v._v(\" Redis如何做内存优化？\")]),v._v(\" \"),e(\"p\",[v._v(\"尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应该把这个用户的所有信息存储到一张散列表里面。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-使用误区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-使用误区\"}},[v._v(\"#\")]),v._v(\" Redis 使用误区\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"键过大\")])]),v._v(\" \"),e(\"p\",[v._v(\"Redis的key是string类型，最大可以是512MB，那么实际中是不是也可以这样用呢？答案是否定的，redis将key保存在一个全局的hashtable，如果key过大，一是占用过多的内存，二是计算hash和字符串比较都会更耗时；一般建议key的大小不超过2kB。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"Big key\")])]),v._v(\" \"),e(\"p\",[v._v(\"或者说是big value，这会导致删除key的操作比较耗时，会阻塞主线程。比如有些同学喜欢用集合类的对象，动辄上百万的元素。对于这类超大集合，一般有两种优化方案，一是采取分片的方式，将每个集合分片控制在较小的范围内，比如小于1000个元素；二是起一个异步任务，对集合中的元素分批进行老化。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"全集合扫描\")])]),v._v(\" \"),e(\"p\",[v._v(\"比如在业务代码使用了keys*，hgetall，zrange(0, -1)等返回集合中所有元素，这些都属于阻塞操作，一般考虑用scan，hscan等迭代操作代替。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"单个实例内存过大\")])]),v._v(\" \"),e(\"p\",[v._v(\"内存过大有什么问题呢？上文中在讲到持久化的时候其实有说到，无论是生成RDB文件，还是AOF重写，都是要对整个实例的内存数据进行扫描，非常消耗CPU和磁盘资源；当使用Backgroud方式创建子进程时也会涉及到内存空间的拷贝，即便使用了COW机制，也会占用相当的内存开销。另外，在主从复制的第一阶段，save、传输和加载RDB文件的开销，也会随着RDB文件的变大而变大。当单个实例达到瓶颈时，更好的解决方案应该是采用集群方案。\")]),v._v(\" \"),e(\"p\",[e(\"strong\",[v._v(\"大量key同时过期\")])]),v._v(\" \"),e(\"p\",[v._v(\"redis删除过期键采用了惰性删除和定期删除相结合的策略，惰性删除则是在每次GET/SET操作时去删，定期删除，则是在时间事件中，从整个key空间随机取样，直到过期键比率小于25%，如果同时有大量key过期的话，极可能导致主线程阻塞。一般可以通过做散列来优化处理。\")]),v._v(\" \"),e(\"h3\",{attrs:{id:\"redis-大-key-和-热-key-问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-大-key-和-热-key-问题\"}},[v._v(\"#\")]),v._v(\" Redis 大 key 和 热 Key 问题\")]),v._v(\" \"),e(\"blockquote\",[e(\"p\",[v._v(\"https://help.aliyun.com/document_detail/353223.html\")])]),v._v(\" \"),e(\"p\",[v._v(\"Redis的过程中，如果未能及时发现并处理 Big keys（下文称为“大Key”）与 Hotkeys（下文称为“热Key”），可能会导致服务性能下降、用户体验变差，甚至引发大面积故障\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"大key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#大key\"}},[v._v(\"#\")]),v._v(\" 大Key\")]),v._v(\" \"),e(\"p\",[v._v(\"通常以Key的大小和Key中成员的数量来综合判定，例如：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"Key本身的数据量过大：一个String类型的Key，它的值为5 MB。\")]),v._v(\" \"),e(\"li\",[v._v(\"Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个。\")]),v._v(\" \"),e(\"li\",[v._v(\"Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。\")])]),v._v(\" \"),e(\"h5\",{attrs:{id:\"引发的问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#引发的问题\"}},[v._v(\"#\")]),v._v(\" 引发的问题\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"客户端执行命令的时长变慢。\")]),v._v(\" \"),e(\"li\",[v._v(\"Redis内存达到\"),e(\"strong\",[v._v(\"maxmemory\")]),v._v(\"参数定义的上限引发操作阻塞或重要的Key被逐出，甚至引发内存溢出（Out Of Memory）。\")]),v._v(\" \"),e(\"li\",[v._v(\"集群架构下，某个数据分片的内存使用率远超其他数据分片，无法使数据分片的内存资源达到均衡。\")]),v._v(\" \"),e(\"li\",[v._v(\"对大Key执行读请求，会使Redis实例的带宽使用率被占满，导致自身服务变慢，同时易波及相关的服务。\")]),v._v(\" \"),e(\"li\",[v._v(\"对大Key执行删除操作，易造成主库较长时间的阻塞，进而可能引发同步中断或主从切换。\")])]),v._v(\" \"),e(\"h5\",{attrs:{id:\"原因\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原因\"}},[v._v(\"#\")]),v._v(\" 原因\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"在不适用的场景下使用Redis，易造成Key的value过大，如使用String类型的Key存放大体积二进制文件型数据；\")]),v._v(\" \"),e(\"li\",[v._v(\"业务上线前规划设计不足，没有对Key中的成员进行合理的拆分，造成个别Key中的成员数量过多；\")]),v._v(\" \"),e(\"li\",[v._v(\"未定期清理无效数据，造成如HASH类型Key中的成员持续不断地增加；\")]),v._v(\" \"),e(\"li\",[v._v(\"使用LIST类型Key的业务消费侧发生代码故障，造成对应Key的成员只增不减。\")])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"热key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#热key\"}},[v._v(\"#\")]),v._v(\" 热Key\")]),v._v(\" \"),e(\"p\",[v._v(\"通常以其接收到的Key被请求频率来判定，例如：\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。\")]),v._v(\" \"),e(\"li\",[v._v(\"带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的\"),e(\"strong\",[v._v(\"HGETALL\")]),v._v(\"操作请求。\")]),v._v(\" \"),e(\"li\",[v._v(\"CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的\"),e(\"strong\",[v._v(\"ZRANGE\")]),v._v(\"操作请求。\")])]),v._v(\" \"),e(\"h5\",{attrs:{id:\"引发的问题-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#引发的问题-2\"}},[v._v(\"#\")]),v._v(\" 引发的问题\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"占用大量的CPU资源，影响其他请求并导致整体性能降低。\")]),v._v(\" \"),e(\"li\",[v._v(\"集群架构下，产生访问倾斜，即某个数据分片被大量访问，而其他数据分片处于空闲状态，可能引起该数据分片的连接数被耗尽，新的连接建立请求被拒绝等问题。\")]),v._v(\" \"),e(\"li\",[v._v(\"在抢购或秒杀场景下，可能因商品对应库存Key的请求量过大，超出Redis处理能力造成超卖。\")]),v._v(\" \"),e(\"li\",[v._v(\"热Key的请求压力数量超出Redis的承受能力易造成缓存击穿，即大量请求将被直接指向后端的存储层，导致存储访问量激增甚至宕机，从而影响其他业务。\")])]),v._v(\" \"),e(\"h5\",{attrs:{id:\"原因-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原因-2\"}},[v._v(\"#\")]),v._v(\" 原因\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"预期外的访问量陡增，如突然出现的爆款商品、访问量暴涨的热点新闻、直播间某主播搞活动带来的大量刷屏点赞、游戏中某区域发生多个工会之间的战斗涉及大量玩家等。\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"找出大-key-和-热-key-并解决\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#找出大-key-和-热-key-并解决\"}},[v._v(\"#\")]),v._v(\" 找出大 Key 和 热 Key 并解决\")]),v._v(\" \"),e(\"p\",[v._v(\"Redis提供多种方案帮助您轻松找出大Key与热Key。\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"实时 Top Key 统计\")]),v._v(\" \"),e(\"li\",[v._v(\"通过 redis-cli 的 bigkeys 和 hotkeys 参数查找\")]),v._v(\" \"),e(\"li\",[v._v(\"通过内置命令对目标 key 分析（比如 String 类型，通过 STRLEN 查看字节数）\")]),v._v(\" \"),e(\"li\",[v._v(\"业务层定位 key (对业务层加访问记录并异步汇总分析)\")]),v._v(\" \"),e(\"li\",[v._v(\"通过 \"),e(\"code\",[v._v(\"MONITOR\")]),v._v(\" 命令找出热 Key\")])]),v._v(\" \"),e(\"h3\",{attrs:{id:\"优化大-key-和-热-key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优化大-key-和-热-key\"}},[v._v(\"#\")]),v._v(\" 优化大 Key 和 热 Key\")]),v._v(\" \"),e(\"h4\",{attrs:{id:\"大-key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#大-key\"}},[v._v(\"#\")]),v._v(\" 大 Key\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[v._v(\"对大Key进行拆分\")]),v._v(\" \"),e(\"p\",[v._v(\"例如将含有数万成员的一个HASH Key拆分为多个HASH Key，并确保每个Key的成员数量在合理范围。在Redis集群架构中，拆分大Key能对数据分片间的内存平衡起到显著作用\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"对大Key进行清理\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"监控Redis的内存水位\")])]),v._v(\" \"),e(\"li\",[e(\"p\",[v._v(\"对过期数据进行定期清理\")])])]),v._v(\" \"),e(\"h4\",{attrs:{id:\"热-key\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#热-key\"}},[v._v(\"#\")]),v._v(\" 热 Key\")]),v._v(\" \"),e(\"ul\",[e(\"li\",[v._v(\"在Redis集群架构中对热Key进行复制\")]),v._v(\" \"),e(\"li\",[v._v(\"在Redis集群架构中对热Key进行复制\")])]),v._v(\" \"),e(\"h2\",{attrs:{id:\"references\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#references\"}},[v._v(\"#\")]),v._v(\" References\")]),v._v(\" \"),e(\"p\",[v._v(\"https://juejin.im/post/6844904017387077640\")]),v._v(\" \"),e(\"p\",[v._v(\"https://www.wmyskxz.com/2020/03/25/dong-yi-dian-python-xi-lie-kuai-su-ru-men-1/#toc-heading-22\")]),v._v(\" \"),e(\"p\",[v._v(\"https://mp.weixin.qq.com/s/f9N13fnyTtnu2D5sKZiu9w\")]),v._v(\" \"),e(\"p\",[v._v(\"https://blog.csdn.net/ThinkWon/article/details/103522351/\")])])}),[],!1,null,null,null);_.default=t.exports}}]);","extractedComments":[]}
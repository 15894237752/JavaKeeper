{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{664:function(t,a,e){\"use strict\";e.r(a);var s=e(6),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"p\",[t._v(\"我们在做二叉树题目时候，第一想到的应该是用 \"),e(\"strong\",[t._v(\"递归\")]),t._v(\" 来解决。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"前、中、后序遍历\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前、中、后序遍历\"}},[t._v(\"#\")]),t._v(\" 前、中、后序遍历\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"翻转二叉树-226\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#翻转二叉树-226\"}},[t._v(\"#\")]),t._v(\" 翻转二叉树（226）\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"翻转一棵二叉树。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"示例：\")])]),t._v(\" \"),e(\"p\",[t._v(\"输入：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"     4\\n   /   \\\\\\n  2     7\\n / \\\\   / \\\\\\n1   3 6   9\\n\")])])]),e(\"p\",[t._v(\"输出：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"     4\\n   /   \\\\\\n  7     2\\n / \\\\   / \\\\\\n9   6 3   1\\n\")])])]),e(\"p\",[t._v(\"思路：从根节点开始，递归地对树进行遍历，并从叶子节点先开始翻转\")])]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://pic.leetcode-cn.com/0f91f7cbf5740de86e881eb7427c6c3993f4eca3624ca275d71e21c5e3e2c550-226_2.gif\",alt:\"226_2.gif\"}})]),t._v(\" \"),e(\"div\",{staticClass:\"language-java extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TreeNode\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"invertTree\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TreeNode\")]),t._v(\" root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"root \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TreeNode\")]),t._v(\" left \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"invertTree\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"left\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TreeNode\")]),t._v(\" right \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"invertTree\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"right\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"left \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" right\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"right \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" left\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" root\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"对称二叉树-101\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对称二叉树-101\"}},[t._v(\"#\")]),t._v(\" 对称二叉树（101）\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"给定一个二叉树，检查它是否是镜像对称的。\")]),t._v(\" \"),e(\"p\",[t._v(\"例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"    1\\n   / \\\\\\n  2   2\\n / \\\\ / \\\\\\n3  4 4  3\\n\")])])]),e(\"p\",[t._v(\"但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"    1\\n   / \\\\\\n  2   2\\n   \\\\   \\\\\\n   3    3\\n\")])])])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉树的最大深度\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的最大深度\"}},[t._v(\"#\")]),t._v(\" \"),e(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\" 二叉树的最大深度\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"给定一个二叉树，找出其最大深度。\")]),t._v(\" \"),e(\"p\",[t._v(\"二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\")]),t._v(\" \"),e(\"p\",[t._v(\"说明: 叶子节点是指没有子节点的节点。\")]),t._v(\" \"),e(\"p\",[t._v(\"示例：\\n给定二叉树 [3,9,20,null,null,15,7]，\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n\")])])]),e(\"p\",[t._v(\"返回它的最大深度 3 。\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"合并二叉树\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#合并二叉树\"}},[t._v(\"#\")]),t._v(\" \"),e(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/merge-two-binary-trees/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"合并二叉树\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。\")]),t._v(\" \"),e(\"p\",[t._v(\"你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。\")]),t._v(\" \"),e(\"p\",[t._v(\"示例 1:\")]),t._v(\" \"),e(\"p\",[t._v(\"输入:\\nTree 1                     Tree 2\"),e(\"br\"),t._v(\"\\n1                         2\"),e(\"br\"),t._v(\"\\n/ \\\\                       / \\\\\"),e(\"br\"),t._v(\"\\n3   2                     1   3\"),e(\"br\"),t._v(\"\\n/                           \\\\   \\\\\"),e(\"br\"),t._v(\"\\n5                             4   7\"),e(\"br\"),t._v(\"\\n输出:\\n合并后的树:\\n3\\n/ \"),e(\"br\"),t._v(\"\\n4   5\\n/ \\\\   \\\\\\n5   4   7\\n注意: 合并必须从两个树的根节点开始。\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉树的直径\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的直径\"}},[t._v(\"#\")]),t._v(\" \"),e(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/diameter-of-binary-tree/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\" 二叉树的直径\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\")]),t._v(\" \"),e(\"p\",[t._v(\"示例 :\\n给定二叉树\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"      1\\n     / \\\\\\n    2   3\\n   / \\\\     \\n  4   5    \\n\")])])]),e(\"p\",[t._v(\"返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\")]),t._v(\" \"),e(\"p\",[t._v(\"注意：两结点之间的路径长度是以它们之间边的数目表示。\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"二叉树的层序遍历\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的层序遍历\"}},[t._v(\"#\")]),t._v(\" \"),e(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"二叉树的层序遍历\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\")]),t._v(\" \"),e(\"p\",[t._v(\"示例：\\n二叉树：[3,9,20,null,null,15,7],\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n\")])])]),e(\"p\",[t._v(\"返回其层序遍历结果：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"[\\n  [3],\\n  [9,20],\\n  [15,7]\\n]\\n\")])])])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"不同的二叉搜索树\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不同的二叉搜索树\"}},[t._v(\"#\")]),t._v(\" \"),e(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/unique-binary-search-trees/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"不同的二叉搜索树\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。\")]),t._v(\" \"),e(\"p\",[t._v(\"示例 1：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\",alt:\"img\"}})]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"输入：n = 3\\n输出：5\\n\")])])]),e(\"p\",[t._v(\"示例 2：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"输入：n = 1\\n输出：1\\n\")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}
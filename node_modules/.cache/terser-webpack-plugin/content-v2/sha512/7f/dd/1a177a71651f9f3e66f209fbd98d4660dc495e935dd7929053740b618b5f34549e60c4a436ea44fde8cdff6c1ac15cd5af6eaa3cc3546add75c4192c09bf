{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{609:function(s,t,e){\"use strict\";e.r(t);var a=e(6),_=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[e(\"blockquote\",[e(\"p\",[s._v(\"文章来源：wmyskxz.com\")])]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"我们总说的 Redis 具有高可靠性，是什么意思呢？\")]),s._v(\" \"),e(\"p\",[s._v(\"其实，这里有两层含义：一是数据尽量少丢失，二是服务尽量少中断。AOF 和 RDB 保证了前者，而对于后者，Redis 的做法就是增加副本冗余量，将一份数据同时保存在多个实例上。即使有一个实例出现了故障，需要过一段时间才能恢复，其他实例也可以对外提供服务，不会影响业务使用。\")])]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"Redis 单节点存在单点故障问题，为了解决单点问题，一般都需要对 Redis 配置从节点，然后使用哨兵来监听主节点的存活状态，如果主节点挂掉，从节点能继续提供缓存功能\")])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"一、redis-集群概述\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、redis-集群概述\"}},[s._v(\"#\")]),s._v(\" 一、Redis 集群概述\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"redis-主从复制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-主从复制\"}},[s._v(\"#\")]),s._v(\" Redis 主从复制\")]),s._v(\" \"),e(\"p\",[s._v(\"到目前为止，我们所学习的 Redis 都是 \"),e(\"strong\",[s._v(\"单机版\")]),s._v(\" 的，这也就意味着一旦我们所依赖的 Redis 服务宕机了，我们的主流程也会受到一定的影响，这当然是我们不能够接受的。\")]),s._v(\" \"),e(\"p\",[s._v(\"所以一开始我们的想法是：搞一台备用机。这样我们就可以在一台服务器出现问题的时候切换动态地到另一台去：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-c48d255bc0b13672.gif\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"幸运的是，两个节点数据的同步我们可以使用 Redis 的 \"),e(\"strong\",[s._v(\"主从同步\")]),s._v(\" 功能帮助到我们，这样一来，有个备份，心里就踏实多了。\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"redis-哨兵\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-哨兵\"}},[s._v(\"#\")]),s._v(\" Redis 哨兵\")]),s._v(\" \"),e(\"p\",[s._v(\"后来因为某种神秘力量，Redis 老会在莫名其妙的时间点出问题 \"),e(\"em\",[s._v(\"(比如半夜 2 点)\")]),s._v(\"，我总不能 24 小时时刻守在电脑旁边切换节点吧，于是另一个想法又开始了：给所有的节点找一个 \"),e(\"strong\",[s._v(\"“管家”\")]),s._v(\"，自动帮我监听照顾节点的状态并切换：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-de8d9ce9e77bf211.gif\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"这大概就是 \"),e(\"strong\",[s._v(\"Redis 哨兵\")]),s._v(\" \"),e(\"em\",[s._v(\"(Sentinel)\")]),s._v(\" 的简单理解啦。什么？管家宕机了怎么办？相较于有大量请求的 Redis 服务来说，管家宕机的概率就要小得多啦.. 如果真的宕机了，我们也可以直接切换成当前可用的节点保证可用..\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"redis-集群化\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-集群化\"}},[s._v(\"#\")]),s._v(\" Redis 集群化\")]),s._v(\" \"),e(\"p\",[s._v(\"好了，通过上面的一些解决方案我们对 Redis 的 \"),e(\"strong\",[s._v(\"稳定性\")]),s._v(\" 稍微有了一些底气了，但单台节点的计算能力始终有限，所谓人多力量大，如果我们把 \"),e(\"strong\",[s._v(\"多个节点组合\")]),s._v(\" 成 \"),e(\"strong\",[s._v(\"一个可用的工作节点\")]),s._v(\"，那就大大增加了 Redis 的 \"),e(\"strong\",[s._v(\"高可用、可扩展、分布式、容错\")]),s._v(\" 等特性：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-8957aa6d1484c5de.png\",alt:\"img\"}})]),s._v(\" \"),e(\"h2\",{attrs:{id:\"四、redis-集群\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、redis-集群\"}},[s._v(\"#\")]),s._v(\" 四、Redis 集群\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-516eb4a9465451a6.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"上图展示了 \"),e(\"strong\",[s._v(\"Redis Cluster\")]),s._v(\" 典型的架构图，集群中的每一个 Redis 节点都 \"),e(\"strong\",[s._v(\"互相两两相连\")]),s._v(\"，客户端任意 \"),e(\"strong\",[s._v(\"直连\")]),s._v(\" 到集群中的 \"),e(\"strong\",[s._v(\"任意一台\")]),s._v(\"，就可以对其他 Redis 节点进行 \"),e(\"strong\",[s._v(\"读写\")]),s._v(\" 的操作。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"基本原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本原理\"}},[s._v(\"#\")]),s._v(\" 基本原理\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-f65c71ca6811c634.png\",alt:\"img\"}})]),s._v(\" \"),e(\"p\",[s._v(\"Redis 集群中内置了 \"),e(\"code\",[s._v(\"16384\")]),s._v(\" 个哈希槽。当客户端连接到 Redis 集群之后，会同时得到一份关于这个 \"),e(\"strong\",[s._v(\"集群的配置信息\")]),s._v(\"，当客户端具体对某一个 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 值进行操作时，会计算出它的一个 Hash 值，然后把结果对 \"),e(\"code\",[s._v(\"16384\")]),s._v(\" \"),e(\"strong\",[s._v(\"求余数\")]),s._v(\"，这样每个 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 都会对应一个编号在 \"),e(\"code\",[s._v(\"0-16383\")]),s._v(\" 之间的哈希槽，Redis 会根据节点数量 \"),e(\"strong\",[s._v(\"大致均等\")]),s._v(\" 的将哈希槽映射到不同的节点。\")]),s._v(\" \"),e(\"p\",[s._v(\"再结合集群的配置信息就能够知道这个 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 值应该存储在哪一个具体的 Redis 节点中，如果不属于自己管，那么就会使用一个特殊的 \"),e(\"code\",[s._v(\"MOVED\")]),s._v(\" 命令来进行一个跳转，告诉客户端去连接这个节点以获取数据：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"GET x\\n-MOVED \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3999\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:6381\\n\")])])]),e(\"p\",[e(\"code\",[s._v(\"MOVED\")]),s._v(\" 指令第一个参数 \"),e(\"code\",[s._v(\"3999\")]),s._v(\" 是 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 对应的槽位编号，后面是目标节点地址，\"),e(\"code\",[s._v(\"MOVED\")]),s._v(\" 命令前面有一个减号，表示这是一个错误的消息。客户端在收到 \"),e(\"code\",[s._v(\"MOVED\")]),s._v(\" 指令后，就立即纠正本地的 \"),e(\"strong\",[s._v(\"槽位映射表\")]),s._v(\"，那么下一次再访问 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 时就能够到正确的地方去获取了。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"集群的主要作用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群的主要作用\"}},[s._v(\"#\")]),s._v(\" 集群的主要作用\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[s._v(\"数据分区\")]),s._v(\"： 数据分区 \"),e(\"em\",[s._v(\"(或称数据分片)\")]),s._v(\" 是集群最核心的功能。集群将数据分散到多个节点，\"),e(\"strong\",[s._v(\"一方面\")]),s._v(\" 突破了 Redis 单机内存大小的限制，\"),e(\"strong\",[s._v(\"存储容量大大增加\")]),s._v(\"；\"),e(\"strong\",[s._v(\"另一方面\")]),s._v(\" 每个主节点都可以对外提供读服务和写服务，\"),e(\"strong\",[s._v(\"大大提高了集群的响应能力\")]),s._v(\"。Redis 单机内存大小受限问题，在介绍持久化和主从复制时都有提及，例如，如果单机内存太大，\"),e(\"code\",[s._v(\"bgsave\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"bgrewriteaof\")]),s._v(\" 的 \"),e(\"code\",[s._v(\"fork\")]),s._v(\" 操作可能导致主进程阻塞，主从环境下主机切换时可能导致从节点长时间无法提供服务，全量复制阶段主节点的复制缓冲区可能溢出……\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"高可用\")]),s._v(\"： 集群支持主从复制和主节点的 \"),e(\"strong\",[s._v(\"自动故障转移\")]),s._v(\" \"),e(\"em\",[s._v(\"（与哨兵类似）\")]),s._v(\"，当任一节点发生故障时，集群仍然可以对外提供服务。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"快速体验\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快速体验\"}},[s._v(\"#\")]),s._v(\" 快速体验\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第一步-创建集群节点配置文件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第一步-创建集群节点配置文件\"}},[s._v(\"#\")]),s._v(\" 第一步：创建集群节点配置文件\")]),s._v(\" \"),e(\"p\",[s._v(\"首先我们找一个地方创建一个名为 \"),e(\"code\",[s._v(\"redis-cluster\")]),s._v(\" 的目录：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"mkdir\")]),s._v(\" -p ~/Desktop/redis-cluster\\n\")])])]),e(\"p\",[s._v(\"然后按照上面的方法，创建六个配置文件，分别命名为：\"),e(\"code\",[s._v(\"redis_7000.conf\")]),s._v(\"/\"),e(\"code\",[s._v(\"redis_7001.conf\")]),s._v(\"…..\"),e(\"code\",[s._v(\"redis_7005.conf\")]),s._v(\"，然后根据不同的端口号修改对应的端口值就好了：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 后台执行\")]),s._v(\"\\ndaemonize \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 端口号\")]),s._v(\"\\nport \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7000\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 为每一个集群节点指定一个 pid_file\")]),s._v(\"\\npidfile ~/Desktop/redis-cluster/redis_7000.pid\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 启动集群模式\")]),s._v(\"\\ncluster-enabled \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 每一个集群节点都有一个配置文件，这个文件是不能手动编辑的。确保每一个集群节点的配置文件不通\")]),s._v(\"\\ncluster-config-file nodes-7000.conf\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 集群节点的超时时间，单位：ms，超时后集群会认为该节点失败\")]),s._v(\"\\ncluster-node-timeout \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5000\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 最后将 appendonly 改成 yes(AOF 持久化)\")]),s._v(\"\\nappendonly \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"记得把对应上述配置文件中根端口对应的配置都修改掉 \"),e(\"em\",[s._v(\"(port/ pidfile/ cluster-config-file)\")]),s._v(\"。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第二步-分别启动-6-个-redis-实例\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二步-分别启动-6-个-redis-实例\"}},[s._v(\"#\")]),s._v(\" 第二步：分别启动 6 个 Redis 实例\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"redis-server ~/Desktop/redis-cluster/redis_7000.conf\\nredis-server ~/Desktop/redis-cluster/redis_7001.conf\\nredis-server ~/Desktop/redis-cluster/redis_7002.conf\\nredis-server ~/Desktop/redis-cluster/redis_7003.conf\\nredis-server ~/Desktop/redis-cluster/redis_7004.conf\\nredis-server ~/Desktop/redis-cluster/redis_7005.conf\\n\")])])]),e(\"p\",[s._v(\"然后执行 \"),e(\"code\",[s._v(\"ps -ef | grep redis\")]),s._v(\" 查看是否启动成功：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-452c3152054c36f1.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"可以看到 \"),e(\"code\",[s._v(\"6\")]),s._v(\" 个 Redis 节点都以集群的方式成功启动了，\"),e(\"strong\",[s._v(\"但是现在每个节点还处于独立的状态\")]),s._v(\"，也就是说它们每一个都各自成了一个集群，还没有互相联系起来，我们需要手动地把他们之间建立起联系。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第三步-建立集群\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三步-建立集群\"}},[s._v(\"#\")]),s._v(\" 第三步：建立集群\")]),s._v(\" \"),e(\"p\",[s._v(\"执行下列命令：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"redis-cli --cluster create --cluster-replicas \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7000 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7001 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7002 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7003 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7004 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7005\\n\")])])]),e(\"p\",[s._v(\"这里稍微解释一下这个 \"),e(\"code\",[s._v(\"--replicas 1\")]),s._v(\" 的意思是：我们希望为集群中的每个主节点创建一个从节点。\")]),s._v(\" \"),e(\"p\",[s._v(\"观察控制台输出：\")]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-d5ab644e76e9cc87.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"看到 \"),e(\"code\",[s._v(\"[OK]\")]),s._v(\" 的信息之后，就表示集群已经搭建成功了，可以看到，这里我们正确地创建了三主三从的集群。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"第四步-验证集群\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第四步-验证集群\"}},[s._v(\"#\")]),s._v(\" 第四步：验证集群\")]),s._v(\" \"),e(\"p\",[s._v(\"我们先使用 \"),e(\"code\",[s._v(\"redic-cli\")]),s._v(\" 任意连接一个节点：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"redis-cli -c -h \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1 -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7000\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"0\")]),s._v(\">\")]),s._v(\"\\n\")])])]),e(\"p\",[e(\"code\",[s._v(\"-c\")]),s._v(\"表示集群模式；\"),e(\"code\",[s._v(\"-h\")]),s._v(\" 指定 ip 地址；\"),e(\"code\",[s._v(\"-p\")]),s._v(\" 指定端口。\")]),s._v(\" \"),e(\"p\",[s._v(\"然后随便 \"),e(\"code\",[s._v(\"set\")]),s._v(\" 一些值观察控制台输入：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"0\")]),s._v(\">\")]),s._v(\" SET name wmyskxz\\n-\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" Redirected to slot \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5798\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" located at \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7001\\nOK\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"可以看到这里 Redis 自动帮我们进行了 \"),e(\"code\",[s._v(\"Redirected\")]),s._v(\" 操作跳转到了 \"),e(\"code\",[s._v(\"7001\")]),s._v(\" 这个实例上。\")]),s._v(\" \"),e(\"p\",[s._v(\"我们再使用 \"),e(\"code\",[s._v(\"cluster info\")]),s._v(\" \"),e(\"em\",[s._v(\"(查看集群信息)\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"cluster nodes\")]),s._v(\" \"),e(\"em\",[s._v(\"(查看节点列表)\")]),s._v(\" 来分别看看：\"),e(\"em\",[s._v(\"(任意节点输入均可)\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\" CLUSTER INFO\\ncluster_state:ok\\ncluster_slots_assigned:16384\\ncluster_slots_ok:16384\\ncluster_slots_pfail:0\\ncluster_slots_fail:0\\ncluster_known_nodes:6\\ncluster_size:3\\ncluster_current_epoch:6\\ncluster_my_epoch:2\\ncluster_stats_messages_ping_sent:1365\\ncluster_stats_messages_pong_sent:1358\\ncluster_stats_messages_meet_sent:4\\ncluster_stats_messages_sent:2727\\ncluster_stats_messages_ping_received:1357\\ncluster_stats_messages_pong_received:1369\\ncluster_stats_messages_meet_received:1\\ncluster_stats_messages_received:2727\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\" CLUSTER NODES\\n56a04742f36c6e84968cae871cd438935081e86f \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7003@17003 slave 4ec8c022e9d546c9b51deb9d85f6cf867bf73db6 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\" connected\\n4ec8c022e9d546c9b51deb9d85f6cf867bf73db6 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7000@17000 master - \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" connected \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"-5460\\ne2539c4398b8258d3f9ffa714bd778da107cb2cd \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7005@17005 slave a3406db9ae7144d17eb7df5bffe8b70bb5dd06b8 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428885222\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\" connected\\nd31cd1f423ab1e1849cac01ae927e4b6950f55d9 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7004@17004 slave 236cefaa9cdc295bc60a5bd1aed6a7152d4f384d \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884209\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\" connected\\n236cefaa9cdc295bc60a5bd1aed6a7152d4f384d \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7001@17001 myself,master - \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428882000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" connected \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5461\")]),s._v(\"-10922\\na3406db9ae7144d17eb7df5bffe8b70bb5dd06b8 \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:7002@17002 master - \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1584428884000\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" connected \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10923\")]),s._v(\"-16383\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127.0\")]),s._v(\".0.1:700\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e(\"span\",{pre:!0,attrs:{class:\"token file-descriptor important\"}},[s._v(\"1\")]),s._v(\">\")]),s._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"数据分区方案简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据分区方案简析\"}},[s._v(\"#\")]),s._v(\" 数据分区方案简析\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"方案一-哈希值-节点数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案一-哈希值-节点数\"}},[s._v(\"#\")]),s._v(\" 方案一：哈希值 % 节点数\")]),s._v(\" \"),e(\"p\",[s._v(\"哈希取余分区思路非常简单：计算 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 的 hash 值，然后对节点数量进行取余，从而决定数据映射到哪个节点上。\")]),s._v(\" \"),e(\"p\",[s._v(\"不过该方案最大的问题是，\"),e(\"strong\",[s._v(\"当新增或删减节点时\")]),s._v(\"，节点数量发生变化，系统中所有的数据都需要 \"),e(\"strong\",[s._v(\"重新计算映射关系\")]),s._v(\"，引发大规模数据迁移。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"方案二-一致性哈希分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案二-一致性哈希分区\"}},[s._v(\"#\")]),s._v(\" 方案二：一致性哈希分区\")]),s._v(\" \"),e(\"p\",[s._v(\"一致性哈希算法将 \"),e(\"strong\",[s._v(\"整个哈希值空间\")]),s._v(\" 组织成一个虚拟的圆环，范围是 0 - \"),e(\"mjx-container\",{staticClass:\"MathJax\",attrs:{jax:\"SVG\"}},[e(\"svg\",{staticStyle:{\"vertical-align\":\"0\"},attrs:{xmlns:\"http://www.w3.org/2000/svg\",width:\"6.133ex\",height:\"2.021ex\",viewBox:\"0 -893.3 2710.9 893.3\"}},[e(\"g\",{attrs:{stroke:\"currentColor\",fill:\"currentColor\",\"stroke-width\":\"0\",transform:\"matrix(1 0 0 -1 0 0)\"}},[e(\"g\",{attrs:{\"data-mml-node\":\"math\"}},[e(\"g\",{attrs:{\"data-mml-node\":\"msup\"}},[e(\"g\",{attrs:{\"data-mml-node\":\"mn\"}},[e(\"path\",{attrs:{\"data-c\":\"32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"}})]),e(\"g\",{attrs:{\"data-mml-node\":\"TeXAtom\",transform:\"translate(500, 363) scale(0.707)\"}},[e(\"g\",{attrs:{\"data-mml-node\":\"mo\"}},[e(\"path\",{attrs:{\"data-c\":\"28\",d:\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"}})]),e(\"g\",{attrs:{\"data-mml-node\":\"mn\",transform:\"translate(389, 0)\"}},[e(\"path\",{attrs:{\"data-c\":\"33\",d:\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"}}),e(\"path\",{attrs:{\"data-c\":\"32\",d:\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\",transform:\"translate(500, 0)\"}})]),e(\"g\",{attrs:{\"data-mml-node\":\"mo\",transform:\"translate(1389, 0)\"}},[e(\"path\",{attrs:{\"data-c\":\"2212\",d:\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"}})]),e(\"g\",{attrs:{\"data-mml-node\":\"mn\",transform:\"translate(2167, 0)\"}},[e(\"path\",{attrs:{\"data-c\":\"31\",d:\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"}})]),e(\"g\",{attrs:{\"data-mml-node\":\"mo\",transform:\"translate(2667, 0)\"}},[e(\"path\",{attrs:{\"data-c\":\"29\",d:\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"}})])])])])])])]),s._v(\"，对于每一个数据，根据 \"),e(\"code\",[s._v(\"key\")]),s._v(\" 计算 hash 值，确定数据在环上的位置，然后从此位置沿顺时针行走，找到的第一台服务器就是其应该映射到的服务器：\")],1),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/wmyskxz/img/img/Redis%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E3%80%90%E9%9B%86%E7%BE%A4%E3%80%91%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/7896890-40e8a2c096c8da92.png\",alt:\"\"}})]),s._v(\" \"),e(\"p\",[s._v(\"与哈希取余分区相比，一致性哈希分区将 \"),e(\"strong\",[s._v(\"增减节点的影响限制在相邻节点\")]),s._v(\"。以上图为例，如果在 \"),e(\"code\",[s._v(\"node1\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 之间增加 \"),e(\"code\",[s._v(\"node5\")]),s._v(\"，则只有 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 中的一部分数据会迁移到 \"),e(\"code\",[s._v(\"node5\")]),s._v(\"；如果去掉 \"),e(\"code\",[s._v(\"node2\")]),s._v(\"，则原 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 中的数据只会迁移到 \"),e(\"code\",[s._v(\"node4\")]),s._v(\" 中，只有 \"),e(\"code\",[s._v(\"node4\")]),s._v(\" 会受影响。\")]),s._v(\" \"),e(\"p\",[s._v(\"一致性哈希分区的主要问题在于，当 \"),e(\"strong\",[s._v(\"节点数量较少\")]),s._v(\" 时，增加或删减节点，\"),e(\"strong\",[s._v(\"对单个节点的影响可能很大\")]),s._v(\"，造成数据的严重不平衡。还是以上图为例，如果去掉 \"),e(\"code\",[s._v(\"node2\")]),s._v(\"，\"),e(\"code\",[s._v(\"node4\")]),s._v(\" 中的数据由总数据的 \"),e(\"code\",[s._v(\"1/4\")]),s._v(\" 左右变为 \"),e(\"code\",[s._v(\"1/2\")]),s._v(\" 左右，与其他节点相比负载过高。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"方案三-带有虚拟节点的一致性哈希分区\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方案三-带有虚拟节点的一致性哈希分区\"}},[s._v(\"#\")]),s._v(\" 方案三：带有虚拟节点的一致性哈希分区\")]),s._v(\" \"),e(\"p\",[s._v(\"该方案在 \"),e(\"strong\",[s._v(\"一致性哈希分区的基础上\")]),s._v(\"，引入了 \"),e(\"strong\",[s._v(\"虚拟节点\")]),s._v(\" 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为 \"),e(\"strong\",[s._v(\"槽（slot）\")]),s._v(\"。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。\")]),s._v(\" \"),e(\"p\",[s._v(\"在使用了槽的一致性哈希分区中，\"),e(\"strong\",[s._v(\"槽是数据管理和迁移的基本单位\")]),s._v(\"。槽 \"),e(\"strong\",[s._v(\"解耦\")]),s._v(\" 了 \"),e(\"strong\",[s._v(\"数据和实际节点\")]),s._v(\" 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 \"),e(\"code\",[s._v(\"4\")]),s._v(\" 个实际节点，假设为其分配 \"),e(\"code\",[s._v(\"16\")]),s._v(\" 个槽(0-15)；\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"槽 0-3 位于 node1；4-7 位于 node2；以此类推….\")])]),s._v(\" \"),e(\"p\",[s._v(\"如果此时删除 \"),e(\"code\",[s._v(\"node2\")]),s._v(\"，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 \"),e(\"code\",[s._v(\"node1\")]),s._v(\"，槽 6 分配给 \"),e(\"code\",[s._v(\"node3\")]),s._v(\"，槽 7 分配给 \"),e(\"code\",[s._v(\"node4\")]),s._v(\"；可以看出删除 \"),e(\"code\",[s._v(\"node2\")]),s._v(\" 后，数据在其他节点的分布仍然较为均衡。\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"节点通信机制简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#节点通信机制简析\"}},[s._v(\"#\")]),s._v(\" 节点通信机制简析\")]),s._v(\" \"),e(\"p\",[s._v(\"集群的建立离不开节点之间的通信，例如我们上面在 \"),e(\"em\",[s._v(\"快速体验\")]),s._v(\" 中刚启动六个集群节点之后通过 \"),e(\"code\",[s._v(\"redis-cli\")]),s._v(\" 命令帮助我们搭建起来了集群，实际上背后每个集群之间的两两连接是通过了 \"),e(\"code\",[s._v(\"CLUSTER MEET\")]),s._v(\" 命令发送 \"),e(\"code\",[s._v(\"MEET\")]),s._v(\" 消息完成的，下面我们展开详细说说。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"两个端口\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两个端口\"}},[s._v(\"#\")]),s._v(\" 两个端口\")]),s._v(\" \"),e(\"p\",[s._v(\"在 \"),e(\"strong\",[s._v(\"哨兵系统\")]),s._v(\" 中，节点分为 \"),e(\"strong\",[s._v(\"数据节点\")]),s._v(\" 和 \"),e(\"strong\",[s._v(\"哨兵节点\")]),s._v(\"：前者存储数据，后者实现额外的控制功能。在 \"),e(\"strong\",[s._v(\"集群\")]),s._v(\" 中，没有数据节点与非数据节点之分：\"),e(\"strong\",[s._v(\"所有的节点都存储数据，也都参与集群状态的维护\")]),s._v(\"。为此，集群中的每个节点，都提供了两个 TCP 端口：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"普通端口：\")]),s._v(\" 即我们在前面指定的端口 \"),e(\"em\",[s._v(\"(7000等)\")]),s._v(\"。普通端口主要用于为客户端提供服务 \"),e(\"em\",[s._v(\"（与单机节点类似）\")]),s._v(\"；但在节点间数据迁移时也会使用。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"集群端口：\")]),s._v(\" 端口号是普通端口 + 10000 \"),e(\"em\",[s._v(\"（10000是固定值，无法改变）\")]),s._v(\"，如 \"),e(\"code\",[s._v(\"7000\")]),s._v(\" 节点的集群端口为 \"),e(\"code\",[s._v(\"17000\")]),s._v(\"。\"),e(\"strong\",[s._v(\"集群端口只用于节点之间的通信\")]),s._v(\"，如搭建集群、增减节点、故障转移等操作时节点间的通信；不要使用客户端连接集群接口。为了保证集群可以正常工作，在配置防火墙时，要同时开启普通端口和集群端口。\")])]),s._v(\" \"),e(\"h4\",{attrs:{id:\"gossip-协议\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gossip-协议\"}},[s._v(\"#\")]),s._v(\" Gossip 协议\")]),s._v(\" \"),e(\"p\",[s._v(\"节点间通信，按照通信协议可以分为几种类型：单对单、广播、Gossip 协议等。重点是广播和 Gossip 的对比。\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"广播是指向集群内所有节点发送消息。\"),e(\"strong\",[s._v(\"优点\")]),s._v(\" 是集群的收敛速度快(集群收敛是指集群内所有节点获得的集群信息是一致的)，\"),e(\"strong\",[s._v(\"缺点\")]),s._v(\" 是每条消息都要发送给所有节点，CPU、带宽等消耗较大。\")]),s._v(\" \"),e(\"li\",[s._v(\"Gossip 协议的特点是：在节点数量有限的网络中，\"),e(\"strong\",[s._v(\"每个节点都 “随机” 的与部分节点通信\")]),s._v(\" \"),e(\"em\",[s._v(\"（并不是真正的随机，而是根据特定的规则选择通信的节点）*，经过一番杂乱无章的通信，每个节点的状态很快会达到一致。Gossip 协议的 \"),e(\"strong\",[s._v(\"优点\")]),s._v(\" 有负载 *(比广播)\")]),s._v(\" 低、去中心化、容错性高 \"),e(\"em\",[s._v(\"(因为通信有冗余)\")]),s._v(\" 等；\"),e(\"strong\",[s._v(\"缺点\")]),s._v(\" 主要是集群的收敛速度慢。\")])]),s._v(\" \"),e(\"h4\",{attrs:{id:\"消息类型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息类型\"}},[s._v(\"#\")]),s._v(\" 消息类型\")]),s._v(\" \"),e(\"p\",[s._v(\"集群中的节点采用 \"),e(\"strong\",[s._v(\"固定频率（每秒10次）\")]),s._v(\" 的 \"),e(\"strong\",[s._v(\"定时任务\")]),s._v(\" 进行通信相关的工作：判断是否需要发送消息及消息类型、确定接收节点、发送消息等。如果集群状态发生了变化，如增减节点、槽状态变更，通过节点间的通信，所有节点会很快得知整个集群的状态，使集群收敛。\")]),s._v(\" \"),e(\"p\",[s._v(\"节点间发送的消息主要分为 \"),e(\"code\",[s._v(\"5\")]),s._v(\" 种：\"),e(\"code\",[s._v(\"meet 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"ping 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"pong 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"fail 消息\")]),s._v(\"、\"),e(\"code\",[s._v(\"publish 消息\")]),s._v(\"。不同的消息类型，通信协议、发送的频率和时机、接收节点的选择等是不同的：\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[s._v(\"MEET 消息：\")]),s._v(\" 在节点握手阶段，当节点收到客户端的 \"),e(\"code\",[s._v(\"CLUSTER MEET\")]),s._v(\" 命令时，会向新加入的节点发送 \"),e(\"code\",[s._v(\"MEET\")]),s._v(\" 消息，请求新节点加入到当前集群；新节点收到 MEET 消息后会回复一个 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"PING 消息：\")]),s._v(\" 集群里每个节点每秒钟会选择部分节点发送 \"),e(\"code\",[s._v(\"PING\")]),s._v(\" 消息，接收者收到消息后会回复一个 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息。\"),e(\"strong\",[s._v(\"PING 消息的内容是自身节点和部分其他节点的状态信息\")]),s._v(\"，作用是彼此交换信息，以及检测节点是否在线。\"),e(\"code\",[s._v(\"PING\")]),s._v(\" 消息使用 Gossip 协议发送，接收节点的选择兼顾了收敛速度和带宽成本，\"),e(\"strong\",[s._v(\"具体规则如下\")]),s._v(\"：(1)随机找 5 个节点，在其中选择最久没有通信的 1 个节点；(2)扫描节点列表，选择最近一次收到 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息时间大于 \"),e(\"code\",[s._v(\"cluster_node_timeout / 2\")]),s._v(\" 的所有节点，防止这些节点长时间未更新。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"PONG消息：\")]),s._v(\" \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息封装了自身状态数据。可以分为两种：\"),e(\"strong\",[s._v(\"第一种\")]),s._v(\" 是在接到 \"),e(\"code\",[s._v(\"MEET/PING\")]),s._v(\" 消息后回复的 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息；\"),e(\"strong\",[s._v(\"第二种\")]),s._v(\" 是指节点向集群广播 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息，这样其他节点可以获知该节点的最新信息，例如故障恢复后新的主节点会广播 \"),e(\"code\",[s._v(\"PONG\")]),s._v(\" 消息。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"FAIL 消息：\")]),s._v(\" 当一个主节点判断另一个主节点进入 \"),e(\"code\",[s._v(\"FAIL\")]),s._v(\" 状态时，会向集群广播这一 \"),e(\"code\",[s._v(\"FAIL\")]),s._v(\" 消息；接收节点会将这一 \"),e(\"code\",[s._v(\"FAIL\")]),s._v(\" 消息保存起来，便于后续的判断。\")]),s._v(\" \"),e(\"li\",[e(\"strong\",[s._v(\"PUBLISH 消息：\")]),s._v(\" 节点收到 \"),e(\"code\",[s._v(\"PUBLISH\")]),s._v(\" 命令后，会先执行该命令，然后向集群广播这一消息，接收节点也会执行该 \"),e(\"code\",[s._v(\"PUBLISH\")]),s._v(\" 命令。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"数据结构简析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构简析\"}},[s._v(\"#\")]),s._v(\" 数据结构简析\")]),s._v(\" \"),e(\"p\",[s._v(\"节点需要专门的数据结构来存储集群的状态。所谓集群的状态，是一个比较大的概念，包括：集群是否处于上线状态、集群中有哪些节点、节点是否可达、节点的主从状态、槽的分布……\")]),s._v(\" \"),e(\"p\",[s._v(\"节点为了存储集群状态而提供的数据结构中，最关键的是 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 和 \"),e(\"code\",[s._v(\"clusterState\")]),s._v(\" 结构：前者记录了一个节点的状态，后者记录了集群作为一个整体的状态。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"clusternode-结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clusternode-结构\"}},[s._v(\"#\")]),s._v(\" clusterNode 结构\")]),s._v(\" \"),e(\"p\",[e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 结构保存了 \"),e(\"strong\",[s._v(\"一个节点的当前状态\")]),s._v(\"，包括创建时间、节点 id、ip 和端口号等。每个节点都会用一个 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 结构记录自己的状态，并为集群内所有其他节点都创建一个 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 结构来记录节点状态。\")]),s._v(\" \"),e(\"p\",[s._v(\"下面列举了 \"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 的部分字段，并说明了字段的含义和作用：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-c extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"typedef\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"clusterNode\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点创建时间\")]),s._v(\"\\n    mstime_t ctime\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点id\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"REDIS_CLUSTER_NAMELEN\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点的ip和端口号\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" ip\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"REDIS_IP_STR_LEN\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" port\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点标识：整型，每个bit都代表了不同状态，如节点的主从状态、是否在线、是否在握手等\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" flags\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//配置纪元：故障转移时起作用，类似于哨兵的配置纪元\")]),s._v(\"\\n    uint64_t configEpoch\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//槽在该节点中的分布：占用16384/8个字节，16384个比特；每个比特对应一个槽：比特值为1，则该比特对应的槽在节点中；比特值为0，则该比特对应的槽不在节点中\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"unsigned\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" slots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16384\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//节点中槽的数量\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" numslots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    …………\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" clusterNode\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"除了上述字段，\"),e(\"code\",[s._v(\"clusterNode\")]),s._v(\" 还包含节点连接、主从复制、故障发现和转移需要的信息等。\")]),s._v(\" \"),e(\"h4\",{attrs:{id:\"clusterstate-结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clusterstate-结构\"}},[s._v(\"#\")]),s._v(\" clusterState 结构\")]),s._v(\" \"),e(\"p\",[e(\"code\",[s._v(\"clusterState\")]),s._v(\" 结构保存了在当前节点视角下，集群所处的状态。主要字段包括：\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-c extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"typedef\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"clusterState\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//自身节点\")]),s._v(\"\\n    clusterNode \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"myself\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//配置纪元\")]),s._v(\"\\n    uint64_t currentEpoch\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//集群状态：在线还是下线\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" state\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//集群中至少包含一个槽的节点数量\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" size\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//哈希表，节点名称->clusterNode节点指针\")]),s._v(\"\\n    dict \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"nodes\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//槽分布信息：数组的每个元素都是一个指向clusterNode结构的指针；如果槽还没有分配给任何节点，则为NULL\")]),s._v(\"\\n    clusterNode \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"slots\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16384\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    …………\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" clusterState\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"除此之外，\"),e(\"code\",[s._v(\"clusterState\")]),s._v(\" 还包括故障转移、槽迁移等需要的信息。\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"更多关于集群内容请自行阅读《Redis 设计与实现》，其中有更多细节方面的介绍 - http://redisbook.com/\")])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"参考与来源\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考与来源\"}},[s._v(\"#\")]),s._v(\" 参考与来源\")]),s._v(\" \"),e(\"ol\",[e(\"li\",[e(\"a\",{attrs:{href:\"https://www.wmyskxz.com/2020/03/17/redis-9-shi-shang-zui-qiang-ji-qun-ru-men-shi-jian-jiao-cheng/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Redis(9)——史上最强【集群】入门实践教程\"),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"li\",[e(\"a\",{attrs:{href:\"https://www.cnblogs.com/kismetv/p/9236731.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"深入学习Redis（3）：主从复制\"),e(\"OutboundLink\")],1)]),s._v(\" \"),e(\"li\")])])}),[],!1,null,null,null);t.default=_.exports}}]);","extractedComments":[]}